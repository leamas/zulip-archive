[
    {
        "content": "<p>For clarity in clang formatting can we have the following set:<br>\nAlignConsecutiveDeclarations: true</p>\n<p>This will change code so that definitions in a block align the variable names which, to me, makes it easier to read . I have created a pull request for this change on opencpn-libs, but would like this to be propagated through to opencpn itself.</p>",
        "id": 395577098,
        "sender_full_name": "Jon",
        "timestamp": 1696800225
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"400132\">@Jon</span>   </p>\n<blockquote>\n<p>For clarity in clang formatting can we have the following set:</p>\n</blockquote>\n<p>Believe me, this is a can of worms. Personally, I found the current style really awkward from the beginning, it took some time to get used to it. But despite this, I have  not changed .clang-format. The basic idea is to not open up for discussions how to format. Such debates tends to take too much energy.</p>\n<p>There are some options here. One is to wait for a week or two to see if you could be used to the current settings. Obviosly, most of us have settled for  this conclusion.</p>\n<p>Another way is that you add your own copy of .clang-format into libraries you actively maintain. I think we all realize that the different projects in opencpn-libs have different culture, and if a project has it's own formatting I don't see any major problems as long as it  is consistent.</p>\n<p>All this said I think we should avoid starting debates how to format the code, besides that formatting should be consistent. This is true for core opencpn, and I think the clang-format in opencpn-libs should be a copy.</p>",
        "id": 395578226,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1696801325
    },
    {
        "content": "<p>Not trying to change the general format, just wanted to make definitions easier to read and less messy.</p>\n<p>I will get used to the other changes even if it is cramped, to me, but reducing readability does not help. Clang got applied to pidc and seemed to be a retrograde step. Why not have a quick think about it before applying this style over OCPN and the new libs.</p>",
        "id": 395590157,
        "sender_full_name": "Jon",
        "timestamp": 1696812301
    },
    {
        "content": "<p>Well, for core opencpn the train has left the station, the  formatting was applied  in #ca24ca21 (Sep 2, 2021).  The discussion took place in <a href=\"https://github.com/opencpn/OpenCPN/issues/1118\">#1118</a>.  After that this has basically been resolved.  </p>\n<p>The formatting here is actually just an example o fthe general rule we (actually Dave) has   decided: for new code we should use the Google C++ Style Guide at <a href=\"https://google.github.io/styleguide/cppguide.html\">https://google.github.io/styleguide/cppguide.html</a> (Google GL)</p>\n<p>What's \"easy to read and less messy\" is in the end a personal thing. I can assure you I have many things I strongly prefer instead of the current style.,<code>char* foo</code>instead of <code>char *foo</code> comes to mind. But I have just adjusted to the fact that there is a large organization and a thorough process behind  Google GL,  so it's usable as is. I have also seen how much energy which can be drained in endless formatting discussions which really cannot be conclusive since it's about personal preferences.</p>\n<p>However, I think we can agree on that a consistent formatting in a project makes maintenance easier.</p>\n<p>What we are doing now is basically to apply the same formatting to these libraries. As I see it this is a default formatting. If some library applies their own .lang-format this is not a problem. In particular, if the upstream sources uses a consistent  formatting it is an advantage to use this since it makes the delta for possible local patches smaller. </p>\n<p>But OTOH I really, really don't want to open the can of worms which is labeled \"what is the best formatting\"?</p>",
        "id": 395639474,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1696837962
    }
]