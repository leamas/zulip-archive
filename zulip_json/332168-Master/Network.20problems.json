[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"517002\">@Dave Register</span>  <span class=\"user-mention\" data-user-id=\"573239\">@Pavel Kalian</span>  <span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nAbout Windows suspend/hibernation issues for TCP connections.<br>\nWe have some discussions on the CF and more about this.<br>\nIt's of course connected to the general (Win?) timeout issue where I after diskussions with Pavel made the PR <a href=\"https://github.com/opencpn/OpenCPN/issues/3356\">#3356</a>.<br>\nNow to test if Win suspend is well detected I made some test hacks that's working good. TCP connections are restarted after a suspend resume.  See attached Git diff.<br>\nThe ideas mentioned in ocpn_frame.cpp: 6955:<br>\n      g_pMUX-&gt;ClearStreams();    and  g_pMUX-&gt;StartAllStreams();<br>\nwould of course be two valuable funktions if established.</p>\n<p>My ideas with the hack in the diff file is just to verify the detection of the Win suspend method. <br>\nThe result is clear from the log:  (the \"Reconnect after Windows suspend\" comes from my hack.)<br>\nSo, I think the Win hibernation issue would be rather easy to solve?</p>\n<div class=\"codehilite\"><pre><span></span><code>12:47:53.407 MESSAGE ocpn_frame.cpp:6936 System is going to suspend.\n17:23:46.757 MESSAGE ocpn_frame.cpp:6949 System resumed from suspend.\n17:24:00.653 MESSAGE ocpn_frame.cpp:6952 Restarting streams.\n.....\n.....\n17:24:01.533 MESSAGE comm_drv_n0183_net.cpp:350  TCP NetworkDataStream watchdog timeout: TCP:signalk.stupan.se:10112. Reconnection is disabled, waiting another 5 seconds.\n17:24:03.062 MESSAGE comm_drv_n0183_net.cpp:361 Reconnect after Windows suspend\n17:24:07.226 MESSAGE comm_bridge.cpp:186    ***GPS Watchdog timeout at Lat:57.6413   Lon: 11.6637\n17:24:08.072 MESSAGE comm_drv_n0183_net.cpp:541 TCP NetworkDataStream connection established: TCP:signalk.stupan.se:10112\n</code></pre></div>\n<p><a href=\"/user_uploads/33951/SsV6DAOsUefzMnpcfppKm59X/suspend_diff.txt\">suspend_diff.txt</a></p>",
        "id": 393537644,
        "sender_full_name": "Håkan Svensson",
        "timestamp": 1695835079
    },
    {
        "content": "<p>I can see also a SignalK connection doesn't reconnect  after a Win hibernation/suspend. Bu there I can't find a watchdog handling to \"hack\" in the same way as for TCP(N0183)?</p>",
        "id": 394892978,
        "sender_full_name": "Håkan Svensson",
        "timestamp": 1696443159
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"517002\">@Dave Register</span> <br>\nAbout TCP connection and comm_drv_n0183_net.cpp.<br>\nI've a constant log flood caused by the 5 seconds, nothing received, timer. (m_dog_value = N_DOG_TIMEOUT)<br>\nOne TCP feed don't send that much data. Some AIS targets now and then. Upstart log below.<br>\nTwo questions:</p>\n<ol>\n<li>Why a time out on 5 seconds? My connection example is nothing strange. In a boat you can by TCP connect an AIS receiver seeing only one target. A class B updates every 3 to 5 minutes. This should not cause any failure action or reconnect?</li>\n<li>Why do we at all monitor the the TCP data flow? Is there not a general socket handling for TCP taking care of the connection and request a at live respons every now and then? Do we have to redo that?<div class=\"codehilite\"><pre><span></span><code> 22:07:49.459 MESSAGE comm_drv_n0183_net.cpp:541 TCP NetworkDataStream connection established: TCP:92.39.188.126:11101\n 22:08:09.580 MESSAGE comm_drv_n0183_net.cpp:350  TCP NetworkDataStream watchdog timeout: TCP:92.39.188.126:11101. Reconnection is disabled, waiting another 5 seconds.\n 22:08:19.518 MESSAGE comm_drv_n0183_net.cpp:350  TCP NetworkDataStream watchdog timeout: TCP:92.39.188.126:11101. Reconnection is disabled, waiting another 5 seconds.\n</code></pre></div>\n\n</li>\n</ol>",
        "id": 402917302,
        "sender_full_name": "Håkan Svensson",
        "timestamp": 1700344226
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"522486\">@Håkan Svensson</span> <br>\nI understand the issue.<br>\nI never imagined a TCP connection providing only one AIS-B target, without any AIVDO messages.  Of course this will time-out every 5 seconds.<br>\nI believe that we need some sort of watchdog on TCP connections.  The case I think of is when one has a local OCPN server which provides NMEA service to possibly a number of OCPN clients, also local.  In fact, this is my \"everyday\" mode for testing.  If the server should die, I want the clients to reconnect automatically when the server returns to life.</p>\n<p>How to handle?<br>\nPerhaps simply throttle the log messages, allow only one log event per (example) 5 minutes after the first is issued?  <br>\nOr more clever:  Measure the average time interval between TCP incoming messages, and compute the watchdog timeout value dynamically as some multiple of the average message interval?</p>\n<p>Thoughts?</p>",
        "id": 403024254,
        "sender_full_name": "Dave Register",
        "timestamp": 1700409267
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"517002\">@Dave Register</span> <br>\nWhen I refererad to any kind of \"inbound\" keep alive methods it was something like discussed <a href=\"https://stackoverflow.com/questions/37917947/when-is-a-tcp-connection-considered-idle\">here</a> and <a href=\"https://my.f5.com/manage/s/article/K13004262\">here</a>.</p>\n<p>I didn't know we need to handle a TCP idle timeout in the program like we do now. (UDP is different. He just wait?)<br>\nBut if so a longer upstart dog time and then a dynamic timer sounds of course efficient if worth the efforts. But then we may need one timer for every single TCP connection? (May be complex.)<br>\nMy example with one class B target, wo VDO, is not usual but still it can be long time idle sometimes. My own log flooding was solved by setting the dog to 15 seconds. <br>\nI suppose the present 5 second was meant to be shorter than the former 6 seconds GPS-dog, now prolonged to 10 seconds (and 20 at start up)? So if nothing else we may consider lengthen the TCP dog accordingly?</p>",
        "id": 403040736,
        "sender_full_name": "Håkan Svensson",
        "timestamp": 1700418995
    }
]