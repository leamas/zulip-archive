[
    {
        "content": "<p>Sebastian Rosset did some in mye eyes good work in <a href=\"https://github.com/opencpn/OpenCPN/issues/4139\">#4139</a>.  I tend to think we should merge this, but just doing this without any discussion probably does not lead to anything meaningful.</p>\n<p>The new, proposed guidelines are available at <a href=\"http://mumin.crabdance.com/manual/opencpn-dev/coding-guidelines.html\">http://mumin.crabdance.com/manual/opencpn-dev/coding-guidelines.html</a></p>\n<p>Short question: good enough?</p>\n<p><span class=\"user-mention\" data-user-id=\"517002\">@Dave Register</span>  <span class=\"user-mention\" data-user-id=\"573239\">@Pavel Kalian</span>   (everyone is of course welcome to the party!)</p>",
        "id": 479953494,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1730405953
    },
    {
        "content": "<p>Looks OK to me</p>",
        "id": 479970015,
        "sender_full_name": "Pavel Kalian",
        "timestamp": 1730414859
    },
    {
        "content": "<p>Ditto, OK by me</p>",
        "id": 479978690,
        "sender_full_name": "Dave Register",
        "timestamp": 1730421674
    },
    {
        "content": "<p>Sorry didn't saw this but wrote a comment <a href=\"https://github.com/OpenCPN/OpenCPN/pull/4139#issuecomment-2451819922\">here</a></p>",
        "id": 480046328,
        "sender_full_name": "Håkan Svensson",
        "timestamp": 1730465377
    },
    {
        "content": "<p>Anyway, new guidelines merged and published <a href=\"https://opencpn-manuals.github.io/main/opencpn-dev/coding-guidelines.html\">here</a></p>",
        "id": 480048822,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1730466525
    },
    {
        "content": "<p>I would have fixed it with the following general Windows advice:<br>\nIf acceptabel I could PR a change to the manual? </p>\n<div class=\"codehilite\"><pre><span></span><code>To do this, just install the pre-commit program from https://pre-commit.com/:\n\n    $ pip install pre-commit\n\n    On Windows:\n\n      $ py -m pip install pre-commit\n\nand then, in the project top directory\n\n    $ pre-commit install\n\n    Windows advices:\n     You need a path to find &quot;pre-commit.exe&quot;. e.g PATH=........;C:\\Python39\\Scripts\n       This path can be a one time or permanent.\n     Then: (Note the -f switch!)\n\n    $ pre-commit install -f\n\nThe above would result in e.g.: &quot;pre-commit installed at .git\\hooks\\pre-commit&quot;\n\nwhich will pick up the configuration from _.pre-commit-config.yaml_ which is\n</code></pre></div>",
        "id": 480198552,
        "sender_full_name": "Håkan Svensson",
        "timestamp": 1730537161
    },
    {
        "content": "<p>hm...  A PR is of course the way to go. I think the windows mess is large enough to warrant a separate subheading.</p>\n<p>More bits and pieces on this:</p>\n<hr>\n<p>The location to pre-commit .exe depends on if running with administrative privileges or not. When running as administrator the path can be found  by <code>python -c \"from distutils.sysconfig import get_python_lib; print(get_python_lib())\"</code></p>\n<p>When running as regular user the path is someting like  <em>C:\\Users\\alec\\AppData\\Roaming\\Python\\Python310\\Scripts</em>. The actual python version (here Python310) will differ (and of course also the username)</p>\n<p>Another solution on WIndows is to use WSL which offers a simple user experience</p>\n<hr>\n<p>Please  take whateveryou find useful in this and make a PR.</p>",
        "id": 480199778,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1730538193
    },
    {
        "content": "<p>Ah.. found it. The path when running as regular user can be found using <code>python -c \"import os,sysconfig;print(sysconfig.get_path(\\\"scripts\\\",f\\\"{os.name}_user\\\"))\"</code></p>",
        "id": 480201805,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1730539960
    },
    {
        "content": "<p>I found an easier way I think.  If you use the winconfig.bat tool it installs nuget.  These 3 lines will install the pre-commit hook:</p>\n<div class=\"codehilite\"><pre><span></span><code>.\\cache\\buildwintemp\\nuget.exe install python\npython.3.13.0\\tools\\python.exe -m pip install --no-warn-script-location -q pre-commit\nrmdir /s /q python.3.13.0\n</code></pre></div>\n<p>This installs a minimal python environment locally then installs the pre-commit hook.  Then it gets rid of python as it is no longer needed.</p>",
        "id": 480203052,
        "sender_full_name": "Dan Dickey",
        "timestamp": 1730541046
    },
    {
        "content": "<p>Sorry, forgot one line. It should be 4 lines:</p>\n<div class=\"codehilite\"><pre><span></span><code>.\\cache\\buildwintemp\\nuget.exe install python\npython.3.13.0\\tools\\python.exe -m pip install --no-warn-script-location -q pre-commit\npython.3.13.0\\tools\\Scripts\\pre-commit.exe install -f\nrmdir /s /q python.3.13.0\n</code></pre></div>\n<p>This works for anyone and doesn't depend on an existing Python installation.</p>",
        "id": 480203776,
        "sender_full_name": "Dan Dickey",
        "timestamp": 1730541648
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"522729\">@Dan Dickey</span> Indeed.  Instead it depends on <em>.\\cache\\buildwintemp\\nuget.exe</em>, and we need to document how to ensure it exists (not an argument against using it, just an add-on)</p>\n<p><span class=\"user-mention\" data-user-id=\"522486\">@Håkan Svensson</span>  In any case, this also depends on a working llvm installation, preferably with clang-format in %PATH%.  We need to document also this, I guess (?)</p>",
        "id": 480209576,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1730546462
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"399510\">Alec Leamas</span> <a href=\"#narrow/channel/332168-Master/topic/Coding.20guidelines.2E/near/480209576\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"522729\">Dan Dickey</span> Indeed.  Instead it depends on <em>.\\cache\\buildwintemp\\nuget.exe</em>, and we need to document how to ensure it exists (not an argument against using it, just an add-on)</p>\n<p>I explained that if you use the winconfig.bat script then nuget will exist.</p>\n</blockquote>",
        "id": 480209722,
        "sender_full_name": "Dan Dickey",
        "timestamp": 1730546588
    },
    {
        "content": "<blockquote>\n<p>I explained that if you use the winconfig.bat script then nuget will exist.</p>\n</blockquote>\n<p>ah, sorry,  sloppy reading from my side.  The alternative would then be to install nuget using choco, I guess.</p>\n<p>Anyway, what's needed is that someone (<span class=\"user-mention\" data-user-id=\"522486\">@Håkan Svensson</span>  <span class=\"user-mention\" data-user-id=\"522729\">@Dan Dickey</span> ?)  boils this down to a PR.</p>",
        "id": 480210228,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1730546991
    },
    {
        "content": "<p>GIven all these loose ends I think we definitely need a separate windows subheading.</p>",
        "id": 480210348,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1730547053
    },
    {
        "content": "<p>For me and my system you make this complicated so anyone else please continue.</p>\n<p>And btw: on my ...\\AppData\\Roaming\\python there is no \\script subfolder. it's on C:\\Python39\\Scripts\\ and also are the Git handling mostly performed from  \"x86 native tools command....\" started as administrator?</p>",
        "id": 480232705,
        "sender_full_name": "Håkan Svensson",
        "timestamp": 1730565408
    },
    {
        "content": "<blockquote>\n<p>And btw: on my ...\\AppData\\Roaming\\python there is no \\script subfolder. it's on C:\\Python39\\Scripts\\</p>\n</blockquote>\n<p>As I wrote: It depends on if you install with administrative privileges or not. You are probably doing this as administrator, hence your path. However, the command line I wrote always works even if the python version is updated (this happens regularly)</p>\n<p>But then again,  if you install  as a regular use (you should, really) things ends up in  <em>...\\AppData\\Roaming\\python</em> i. e., the path returned by   <code>python -c \"import os,sysconfig;print(sysconfig.get_path(\\\"scripts\\\",f\\\"{os.name}_user\\\"))\"</code>. Using these kind of tricks is way better than to just document a path which cannot be copied.</p>",
        "id": 480233062,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1730565712
    },
    {
        "content": "<p>My was path was of course an example. I though \"e.g.\" was a shortcut for that, like your often used expression \"Something like...\"<br>\nAnyhow..<br>\nMy aim was to share a simple way that worked for me. But I'll leave this to those who can express it better.</p>",
        "id": 480244997,
        "sender_full_name": "Håkan Svensson",
        "timestamp": 1730576188
    }
]