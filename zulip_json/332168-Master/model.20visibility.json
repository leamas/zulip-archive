[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"517002\">@Dave Register</span> </p>\n<p>We are obviously running into problem trying to grasp the concept of model + GUI. Not least  the question about  whch files that belongs to the model vs the gui  is muddy with a list in CMakeLists as the only definiion.</p>\n<p>I think the boundaries between the two layers are  reasonably stable right now.</p>\n<p>What if we divided bot src/ and include/ into src/model, src/gui, include/model and include/gui? That would IMHO make it much clearer. </p>\n<p>Both src/ and include/ are BTW quite big and would perhaps benifit from some  organization. </p>\n<p>just an idea...</p>",
        "id": 402545874,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1700164814
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nI think basically a good idea.  A source organization that helps us to refactor intelligently makes sense.<br>\nOn more refactor thought, we have lots of non-GUI utility functions lying around, placed for convenience rather than general utility.<br>\nIndeed, a large part of the entire set of bare subroutines called by a plugin (i.e. plugin-&gt;core) should be moved out of pluginmanager, and into something else that can logically live in the model.  I'm thinking about non-GUI plugins, if there ever was such a beast.  Useful for plugin functional test also, for instance.<br>\nAnyway, lots of old-fashioned C-style code to refactor as the opportunity arises.</p>",
        "id": 402560773,
        "sender_full_name": "Dave Register",
        "timestamp": 1700170540
    },
    {
        "content": "<blockquote>\n<p>ndeed, a large part of the entire set of bare subroutines called by a plugin (i.e. plugin-&gt;core) should be moved out of pluginmanager,</p>\n</blockquote>\n<p>Indeed. src/plugin_api.cpp. Problem is that many of these are gui related, what plugins wants from opencpn core is actually gui to a large extent. This could be solved using callbacks, but it will take some man hours.</p>",
        "id": 402561419,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1700170794
    },
    {
        "content": "<p>Making the split  model/gui split is not that hard, will need som sed voodoo. However, It will break each and every pending PR, including some of mine ;)</p>",
        "id": 402561564,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1700170853
    },
    {
        "content": "<p>BTW. pluginmanager was and still is sort of an abomination. From the beginning it was about three things: plugin loading, the plugin handling gui and implementation of large parts of ocpn_plugin.h.  These are actually not that related.</p>\n<p>We have now split out the loading stuff whcih is good. Splitting API implementation and plugin handling GUI would be the next step.</p>\n<p>Good ntght!</p>",
        "id": 402562291,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1700171159
    },
    {
        "content": "<p>Made a manual page: <a href=\"https://opencpn-manuals.github.io/main/opencpn-dev/gui-model.html\">https://opencpn-manuals.github.io/main/opencpn-dev/gui-model.html</a></p>\n<p>Planning to announce it later.</p>",
        "id": 403048845,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1700424666
    }
]