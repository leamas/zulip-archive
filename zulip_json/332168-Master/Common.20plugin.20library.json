[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nI am preparing a PR to opencpn-libs to add more commonly used libraries to the current set.  This is part of an effort to harmonize all the plugins built using the \"TP\" template, to improve maintenance chores.<br>\nWould you prefer the PR to target \"main\", or \"devel\" branch?  I assume the plugins using opencpn-libs now are using \"main\" as their sub-module.  Correct me if wrong, or any other notes regarding your workflow.<br>\nThanks</p>",
        "id": 389948607,
        "sender_full_name": "Dave Register",
        "timestamp": 1694206333
    },
    {
        "content": "<p>Devel</p>",
        "id": 389984806,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1694229246
    },
    {
        "content": "<p>OK, thanks</p>",
        "id": 389990637,
        "sender_full_name": "Dave Register",
        "timestamp": 1694233598
    },
    {
        "content": "<p>This makes opencpn-plugins a more central piece in the puzzle and not just a Shipdriver thing. This was my original plan, and I'm happy with it. In  this situation it makes sense to invite you and Pavel as maintainers to opencpn-libs for the same reasons that not only  you have permissions on OpenCPN.</p>\n<p>The model on opencpn-libs is basically that devel is the testing area while the master is the rolling release branch.  Hence I suggest that  all feel free to commit to devel. Still, I would appreciate  if I for now could be the one handling master as long as I'm in the project.</p>\n<p>OK?<br>\n<span class=\"user-mention\" data-user-id=\"517002\">@Dave Register</span>  <span class=\"user-mention\" data-user-id=\"573239\">@Pavel Kalian</span></p>",
        "id": 390006919,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1694245623
    },
    {
        "content": "<p>OK.  I will Sandbox in Devel, discuss upstream to main as we move along.</p>",
        "id": 390038376,
        "sender_full_name": "Dave Register",
        "timestamp": 1694268846
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nDetails:<br>\non Appveyor only, submodule update fails at build time.</p>\n<div class=\"codehilite\"><pre><span></span><code>git submodule update --init opencpn-libs\n\nSubmodule &#39;opencpn-libs&#39; (git@github.com:leamas/opencpn-libs.git) registered for path &#39;opencpn-libs&#39;\nCloning into &#39;C:/project/ocpn_project/opencpn-libs&#39;...\ngit@github.com: Permission denied (publickey).\nfatal: Could not read from remote repository.\nPlease make sure you have the correct access rights\nand the repository exists.\nfatal: clone of &#39;git@github.com:leamas/opencpn-libs.git&#39; into submodule path &#39;C:/project/ocpn_project/opencpn-libs&#39; failed\n</code></pre></div>\n\n<p>Ideas?</p>",
        "id": 390433222,
        "sender_full_name": "Dave Register",
        "timestamp": 1694486564
    },
    {
        "content": "<p>You ate using a git URL which requires a SSH key registered at GitHub. This is wrong in general for ci builds, use the https URL instead.</p>",
        "id": 390452962,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1694499954
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nYep, that's it.  Thanks<br>\nBut we have other problems with Appveyor.  Might need to drop VS2017 (and wx3.1) Windows builds.</p>",
        "id": 390591234,
        "sender_full_name": "Dave Register",
        "timestamp": 1694550432
    },
    {
        "content": "<p>what is it? Any logs?</p>",
        "id": 390709470,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1694607118
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nHere is one:<br>\n<a href=\"https://ci.appveyor.com/project/bdbcat/watchdog-pi/builds/48027882\">https://ci.appveyor.com/project/bdbcat/watchdog-pi/builds/48027882</a></p>\n<p>The problem is not directly related to opencpn-libs.  I think the VS2017 pre-load in Appveyor is missing some standard Windows header files.  <br>\nThere are some hack-y things that we could do, but really, the problem belongs to Appveyor.<br>\nWe are trying to get Appveyor's support line to take a look.</p>\n<p>Otherwise, I have added a few directories to opencpn-libs, tweaked a few header includes, and we have adapted now three TP plugins without serious problems.  When we get the matrix complete, I'll have some suggestions before merging devel to main.<br>\nThanks</p>",
        "id": 390837782,
        "sender_full_name": "Dave Register",
        "timestamp": 1694659005
    },
    {
        "content": "<p>This actually seems to be a bug in the SDK which ms does not intend to fix: <a href=\"https://developercommunity.visualstudio.com/t/file-winapifamilyh-is-missing-from-toolkit-folder/720522\">https://developercommunity.visualstudio.com/t/file-winapifamilyh-is-missing-from-toolkit-folder/720522</a>.</p>\n<p>OTOH, it shouldn't be that bad to bundle this header in case cmake can't locate it.  The natural place to do this would be the WindowsHeaders library. Let's say we add  a <em>WindowsHeaders/include-2017-compat</em> directory and put winapifamily.h there.<br>\nThen , in <em>WindowsHeaders CMakeLists.txt</em> add</p>\n<div class=\"codehilite\"><pre><span></span><code>check_include_file(winapifamily.h HAVE_WINAPIFAMILY_H)\nif (NOT HAVE_WINAPIFAMILY_H)\n  # Work around known VS2017 bug:\n  target_include_directories(\n     _windows_headers INTERFACE  ${CMAKE_CURRENT_SOURCE_DIR}/include-2017-compat\n  )\nendif ()\n</code></pre></div>",
        "id": 390882073,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1694680979
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nWe can try that.  I expect that there may be a flood of missing headers, some google suggests 8 files.  We shall see.</p>",
        "id": 390936542,
        "sender_full_name": "Dave Register",
        "timestamp": 1694699942
    },
    {
        "content": "<p>Another question is of course from which release Windows provides the  corresponding libraries....</p>",
        "id": 390963986,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1694704656
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nSome discussion:<br>\n<a href=\"https://github.com/rgleason/watchdog_pi/issues/66\">https://github.com/rgleason/watchdog_pi/issues/66</a></p>",
        "id": 391325238,
        "sender_full_name": "Dave Register",
        "timestamp": 1694838785
    },
    {
        "content": "<p>That discussion  is now closed.  As I see it, of all bad alternatives we have is keeping things as they are perhaps the least awful. That would then mean that we just dropped vs2017 builds for those plugins which does not work.</p>\n<p>What people seem to do is to download and install vs2017 as part of the CI build. Perhaps doable, perhaps not. But: is it worth it?</p>",
        "id": 391376650,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1694870040
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nAll...<br>\nThere is a very small error in opencpn-libs, in the file api-18/ocpn_plugin.h.   This error prevents using plugin API-118 on Android platforms.<br>\nThis error will be corrected shortly, and a new OpenCPN for Android will be published to correspond.<br>\nAlec, will you make the change to master, or shall I?</p>",
        "id": 391601507,
        "sender_full_name": "Dave Register",
        "timestamp": 1695002589
    },
    {
        "content": "<p>I think it's a bad idea that opencpn-libs would diverge from main opencpn in this case. Furthermore, in opencpn-libs master should never be ahead of devel. Hence I suggest we do this change like this:</p>\n<ol>\n<li>You update ocpn_plugin.h in main opencpn</li>\n<li>You update the devel branch with an exact copy from main opencpn. </li>\n<li>I cherry-pick the commit from devel to master.</li>\n</ol>",
        "id": 391623295,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1695015623
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span>  <br>\n Good plan.<br>\nI'll also cherry-pick back to v5.8.x for Android build.</p>",
        "id": 391713176,
        "sender_full_name": "Dave Register",
        "timestamp": 1695047459
    },
    {
        "content": "<p>OK. Ping me when devel is updated.</p>",
        "id": 391714906,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1695047983
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\n\"devel\" updated.</p>",
        "id": 391723621,
        "sender_full_name": "Dave Register",
        "timestamp": 1695050463
    },
    {
        "content": "<p>Pushed to main, verbatim copy.</p>",
        "id": 391724891,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1695050830
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span>  Do I need to delete <em>opencpn-libs</em> and start over?</p>\n<div class=\"codehilite\"><pre><span></span><code>D:\\Documents\\Github\\shipdriver_pi&gt;git submodule update --remote --merge opencpn-libs\nAuto-merging api-18/ocpn_plugin.h\nCONFLICT (content): Merge conflict in api-18/ocpn_plugin.h\nAutomatic merge failed; fix conflicts and then commit the result.\nfatal: Unable to merge &#39;e1e9352eca09bf383dfa141c464dc611779a75fc&#39; in submodule path &#39;opencpn-libs&#39;\n</code></pre></div>",
        "id": 391868455,
        "sender_full_name": "Mike Rossiter",
        "timestamp": 1695115538
    },
    {
        "content": "<p>oops... No, you should not have to delete the submodule. Deleting it is actually a convoluted task , see  opencpn-libs/README.md</p>\n<p>This should basically be about selecting the right version. Something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>    $ cd opencpn-libs\n    $ git remote update origin\n    $ git checkout -f origin/main\n</code></pre></div>\n<p>There might be things to sort out first since you have  a failed merge, though. Perhaps <code>git merge --abort</code> can clean up the state first.</p>",
        "id": 391870836,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1695116275
    },
    {
        "content": "<p>Thanks.  Fixed and commit made to ShipDriver master.</p>",
        "id": 391875209,
        "sender_full_name": "Mike Rossiter",
        "timestamp": 1695117300
    },
    {
        "content": "<p>BTW the Zulip standalone app is not loading for me this morning.</p>",
        "id": 391875513,
        "sender_full_name": "Mike Rossiter",
        "timestamp": 1695117401
    },
    {
        "content": "<p>Installed 5.10.2 and working again.</p>",
        "id": 391877203,
        "sender_full_name": "Mike Rossiter",
        "timestamp": 1695117939
    },
    {
        "content": "<blockquote>\n<p>. Fixed and commit made to ShipDriver master.</p>\n</blockquote>\n<p>Great to hear!</p>\n<blockquote>\n<p>BTW the Zulip standalone app is not loading for me this morning.</p>\n</blockquote>\n<p>I'm using Flatpak, so it's automatically updated ;)</p>",
        "id": 391883341,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1695120076
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nQuestion about submodule use.<br>\nIn our CCI scripts, we say:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ git submodule update --init opencpn-libs\n</code></pre></div>\n\n<p>This does not pull the HEAD of the opencpn-libs/devel repo.  It seems to pull the commit of the repo that was HEAD at the time that opencpn-libs was added to the project.<br>\nTo fix this, we can then say:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ git submodule update --remote --merge opencpn-libs\n</code></pre></div>\n\n<p>And this will pull the HEAD of the opencpn-libs repo.<br>\nThis is what we want. Seems to work.<br>\nBut is this best practice, when the submodule is a moving target, as opencpn-libs/devel is today?</p>",
        "id": 392023917,
        "sender_full_name": "Dave Register",
        "timestamp": 1695173581
    },
    {
        "content": "<p>More:<br>\nTurns out that flatpak builder is smart enough to update submodules in the source tree, without explicit direction.<br>\nAs a result, even if we do  \"git submodule update --remote --merge opencpn-libs\", the flatpak builder later does another \"git submodule update --init opencpn-libs\".  So the submodule fetch is not necessarily pointing at HEAD.<br>\nConclusion:  For flatpak, we need to explicitly update the submodule in the parent tree, every time the submodule changes.  Sigh...</p>",
        "id": 392034921,
        "sender_full_name": "Dave Register",
        "timestamp": 1695179602
    },
    {
        "content": "<blockquote>\n<p>But is this best practice, when the submodule is a moving target, as opencpn-libs/devel is today?</p>\n</blockquote>\n<p>Perhaps, perhaps not. </p>\n<p>In the shipdriver case, we use a specific commit as part of the template. This is locked when doing the final <code>git add opencpn-libs; git commit ...</code> which locks the version used. Updating opencpn-libs  happens when the template is updated. So far, I think this is a reasonable strategy.</p>",
        "id": 392055379,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1695193355
    },
    {
        "content": "<p>For Flatpak, this should be no differerence. Whatever it pulls from the remote opencpn-libs repo, the version it actually uses is the one checked in into the plugin, normally defined by the template.</p>",
        "id": 392055628,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1695193495
    },
    {
        "content": "<p>Added to this is the extra layer: plugins in production should use the opencpn-libs main branch which we only update when we are overall happy with the state of devel. Updating main is sort of making a new release, so to speak.</p>\n<p>Which raises the question: are we ready to merge devel into main?</p>",
        "id": 392056130,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1695193744
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nThanks for the discussion.<br>\nNot ready yet to merge devel.  I want to get Rick's entire array for plugins built from devel, then do a little cleanup.<br>\nI don't know if you have looked at devel commits.  They are a little rough, especially all the gl/glu stuff.  Needs some consolidation.</p>",
        "id": 392125921,
        "sender_full_name": "Dave Register",
        "timestamp": 1695218979
    },
    {
        "content": "<p>No, I havn't checked anything so far. However, as long as the end result is ok it's probably better to merge it as it is rather than rewriting (and thus rebasing the history. One alternative might be to squash all changes into a single commit when merging.</p>",
        "id": 392131717,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1695220669
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nre opencpn-libs:<br>\nAny particular reason we need  a core opencpn.pdb in the api-18/msvc-wx32 directory?  It is pretty heavy (43MB)...</p>",
        "id": 392132294,
        "sender_full_name": "Dave Register",
        "timestamp": 1695220828
    },
    {
        "content": "<p>It's the natural place to make it possible to debug and make usable coredumps. It could possible be replaced by code downloading it on demand, but this would require some work.</p>\n<p>I'm not that worried about  the weight of opencpn-libs. After all, it's a build dependency, not a runtime one.</p>",
        "id": 392132860,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1695221013
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nWe post production release pdb on github:<br>\n<a href=\"https://github.com/OpenCPN/OpenCPN/releases/download/Release_5.8.4/opencpn+627.1637c28f.pdb.tar.gz\">https://github.com/OpenCPN/OpenCPN/releases/download/Release_5.8.4/opencpn+627.1637c28f.pdb.tar.gz</a></p>\n<p>I am sensitive to Rick's situation, packaging and dealing with some 24 plugins at one time.<br>\nNot a big deal, just optimizing storage and workflow.</p>",
        "id": 392133795,
        "sender_full_name": "Dave Register",
        "timestamp": 1695221313
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"517002\">Dave Register</span> <a href=\"#narrow/stream/332168-Master---5.2E8.2E0--.28was.3A-comms.29/topic/Common.20plugin.20library/near/392125921\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"399510\">Alec Leamas</span> <br>\nThanks for the discussion.<br>\nNot ready yet to merge devel.  I want to get Rick's entire array for plugins built from devel, then do a little cleanup.<br>\nI don't know if you have looked at devel commits.  They are a little rough, especially all the gl/glu stuff.  Needs some consolidation.</p>\n</blockquote>\n<p>Definitely needs a squash merge.</p>",
        "id": 392134114,
        "sender_full_name": "Dave Register",
        "timestamp": 1695221419
    },
    {
        "content": "<p>I know, but just removing would be a step backwards on the road to usable coredumps.  Worth filing an issue, but my hands are full with other things right now...</p>",
        "id": 392134352,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1695221506
    },
    {
        "content": "<blockquote>\n<p>Definitely needs a squash merge.</p>\n</blockquote>\n<p>OK</p>",
        "id": 392134499,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1695221541
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nOK, let it stand as-is for now.<br>\nWe need stability more than we need peep-hole optimization.</p>",
        "id": 392135509,
        "sender_full_name": "Dave Register",
        "timestamp": 1695221849
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nGeneral (philosophical?) question.<br>\nopencpn-libs contains several static library builds that I have been constructing so as to build cleanly without reference to the calling source tree at all. Further, a library should not depend on definitions found in peer libaries, if at all possible. This is the general linux model for dependent libraries, and for one thing is a guaranteed method of reducing spaghetti-code.  Good.</p>\n<p>So, how shall we in general handle the cases where one of the static libraries depends on a header included in another library?<br>\nHere is a specific example that I am working now:<br>\n\"ocpn::glu_static\" library needs a definition found in  \"ocpn::api\".<br>\nShall we declare that libraries can be dependent upon peers?  Or shall we duplicate definitions as necessary?<br>\nWondering...</p>",
        "id": 392732827,
        "sender_full_name": "Dave Register",
        "timestamp": 1695497802
    },
    {
        "content": "<p>Sorry, a bit overloaded these days. I'll be back on other stuff.</p>\n<p>LIbraries depending on other libraries is no problem, and is indeed common in all operating systems. Practically, in a plugin scenario:</p>\n<ol>\n<li>Assume we have a library foo exporting the transitive target ocpn::foo</li>\n<li>Assume we have another library bar which depends on foo.</li>\n<li>In <em>bar/CMakeLists.txt</em> we add <code>target_link_libraries(bar PRIVATE ocpn::foo)</code></li>\n<li>If the plugin depends on foo it adds <code>target_link_libraries(plugin_name PRIVATE ocpn::bar)</code>  to it's own CMakelists.txt or Plugin.cmake.</li>\n</ol>\n<p>And that's it. Problem arises if there are circular dependencies or if the library depends on the plugin. The latter is a blocking error.</p>",
        "id": 392858810,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1695581790
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nOK.   There is a little bit of \"not pretty\" required to actually include and build foo in the cmake context of bar.<br>\nWe need a step 2.9:<br>\nin bar/CmakeLists.txt, add :  (assuming the source for foo is in opencpn-libs, and is a subdir called \"libfoo\".<br>\n    add_subdirectory(../libfoo)</p>\n<p>To my mind, this is not so pretty.</p>\n<p>Further, if the plugin itself links both foo and bar, there could be duplicated references to foo.  We must trust that the linker will sort this out.</p>\n<p>Maybe I make trouble where none exists.</p>",
        "id": 392890995,
        "sender_full_name": "Dave Register",
        "timestamp": 1695608869
    },
    {
        "content": "<p>Yes, <code>add_subdirectory(../libfoo)</code> isn't that pretty. One basic reason is that in the cmake community relative paths are frowned upon.</p>\n<p>IMHO, a better approach is to use </p>\n<div class=\"codehilite\"><pre><span></span><code>if (NOT TARGET ocpn::foo)\n  add_subdirectory(${CMAKE_SOURCE_DIR}/opencpn-libs/libfoo)\nendif ()\n</code></pre></div>\n<p>You cant really get around the fact that you need a path to the sources. The conditional gives the overall build a chance to fix things if the paths are different for some reason, though.</p>\n<p>The duplicated library references is not a problem, this is what linkers do. All reasonably sized builds have these kind of duplicates. </p>\n<p>The same is true for the duplicated <code>-I</code> and other compilation flags brought to the build by <code>target_link_libraries()</code> They are duplicated, but it doesn't matter.</p>",
        "id": 392912946,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1695619874
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nI don't like this much better:</p>\n<div class=\"codehilite\"><pre><span></span><code>add_subdirectory(${CMAKE_SOURCE_DIR}/opencpn-libs/libfoo)\n</code></pre></div>\n\n<p>Implies a full plugin build, where CMAKE_SOURCE_DIR is the plugin base.<br>\nBut that's what we have to work with, I suppose..</p>",
        "id": 393018997,
        "sender_full_name": "Dave Register",
        "timestamp": 1695649706
    },
    {
        "content": "<p>Using the conditional, the path is sort of a default or fallback path used if the main build, whatever that is, does not include the proper path. Assuming a plugin build as such a default is perhaps not that bad. </p>\n<p>It's definitely not ideal, but I don't see any alternative. Do you?</p>",
        "id": 393019663,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1695649874
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nWe can agree that this is generally not pretty, but no alternatives.  I'm content.</p>",
        "id": 393020698,
        "sender_full_name": "Dave Register",
        "timestamp": 1695650127
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nTrying to come up with a script to completely remove a submodule from a plugin project.<br>\nSo far I have this:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ git submodule deinit opencpn-libs\n$ git rm --cached opencpn-libs\n$ rm -rf .git/modules/opencpn-libs\n$ git add .\n$ git commit -m &quot;Remove opencpn-libs submodule.&quot;\n</code></pre></div>\n\n<p>Works OK, but leaves an invalid section in .gitmodules.<br>\nAny automatic way to fix that, short of manual edit?</p>\n<p>Rant:  Why is this so hard?  Seems like a \"normal\" git task.</p>",
        "id": 394657702,
        "sender_full_name": "Dave Register",
        "timestamp": 1696346544
    },
    {
        "content": "<p>It is actually extremely hard. Have you seen the note in opencpn-libs/README.md? Including the stackoverflow link?</p>",
        "id": 394696633,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1696361367
    },
    {
        "content": "<blockquote>\n<p>Any automatic way to fix that, short of manual edit?</p>\n</blockquote>\n<p>well, any form of manual edit could be replaced with automated sed or ed driven by a script. Still, it's some work...</p>",
        "id": 394696944,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1696361484
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\ngit-fu...<br>\nThe required commands are::</p>\n<div class=\"codehilite\"><pre><span></span><code>$ git config -f .gitmodules --remove-section submodule.opencpn-libs\n$ git add .gitmodules\n</code></pre></div>\n\n<p>So, my complete solution is (for posterity):</p>\n<div class=\"codehilite\"><pre><span></span><code>$ git submodule deinit -f opencpn-libs\n$ git rm --cached opencpn-libs\n$ rm -rf .git/modules/opencpn-libs\n$ git config -f .gitmodules --remove-section submodule.opencpn-libs\n$ git add .gitmodules\n$ git commit -m &quot;Remove opencpn-libs submodule.&quot;\n</code></pre></div>",
        "id": 394702897,
        "sender_full_name": "Dave Register",
        "timestamp": 1696364275
    },
    {
        "content": "<p>Ok, seems like you found the complete solution. Could you update README.md so we don't lose it?</p>",
        "id": 394703091,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1696364367
    },
    {
        "content": "<p>Done, pushed to \"devel\"</p>",
        "id": 394709908,
        "sender_full_name": "Dave Register",
        "timestamp": 1696366422
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nAfter some fuss, the opencpn-libs \"devel\" branch is now ready for review and squash merge to \"main\".<br>\nAt your convenience.<br>\nThanks</p>",
        "id": 395263390,
        "sender_full_name": "Dave Register",
        "timestamp": 1696599892
    },
    {
        "content": "<p>I just tried switching to the devel branch and the Windows builds fail like <a href=\"https://github.com/nohal/dashboardsk_pi/actions/runs/6444082725/job/17496664120\">https://github.com/nohal/dashboardsk_pi/actions/runs/6444082725/job/17496664120</a> So far unable to convince them not to use the GLU from the system SDK...</p>",
        "id": 395468225,
        "sender_full_name": "Pavel Kalian",
        "timestamp": 1696725938
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"517002\">@Dave Register</span>  I'm having a deliberate delay before merging into main for reasons like above.</p>",
        "id": 395503562,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1696750481
    },
    {
        "content": "<p>Besides the windows problems reported by <span class=\"user-mention\" data-user-id=\"573239\">@Pavel Kalian</span>  some random initial remarks on cuirrent code.</p>\n<div class=\"codehilite\"><pre><span></span><code>ifndef DECL_EXP\n#ifdef __WXMSW__\n#  define DECL_EXP     __declspec(dllexport)\n#else\n# ifdef __GNUC__\n# define DECL_EXP       __attribute__((visibility(&quot;default&quot;)))\n#else\n#  define DECL_EXP\n# endif\n#endif\n#endif\n</code></pre></div>\n<p>This snippet misses clang which should use the the same DECL_EXP as gcc</p>",
        "id": 395505100,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1696751350
    },
    {
        "content": "<p>Formatting is not really well defined for plugins. That said, since some parts are more or less completely rewritten it might make sense to apply the same formatting as used by core OpenCPN i. e. using clang-format and the same .clang-format configuration. </p>\n<p>In any case, the new code contains trailing whitespace which should be removed.</p>",
        "id": 395505506,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1696751493
    },
    {
        "content": "<p>The formal copyright statement contradicts the <em>Author:   Jon Gough based on work by Sean D'Epagnier</em>. The correct way to state this is to modify the copyright statement to read</p>\n<div class=\"codehilite\"><pre><span></span><code>Copyright (C) 2011 by Sean D&#39;Epagnier.\nCopyright (C) 2023 Jon Gough.\n...\n</code></pre></div>\n<p>With this copyright statement, the <em>Author:</em> statement is redundant and could (i. e., should) be removed.<br>\nCurrent form means legal problems, potentially making it impossible to include code in Linux distros.</p>",
        "id": 395506202,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1696751944
    },
    {
        "content": "<p>This: <code>#if defined(__ANDROID__) || defined(__OCPN__ANDROID__)</code></p>\n<p>__ANDROID__ is defined by the compiler and thus always available on arm builds. __OCPN__ANDROID__ is actually an illegal symbol (only compiler and frameworks should use a __ prefix) and should be replaced with __ANDROID__</p>",
        "id": 395508605,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1696753261
    },
    {
        "content": "<p>For example in  pidc.cpp around line  368 we have</p>\n<div class=\"codehilite\"><pre><span></span><code>#endif\n\n#endif\n</code></pre></div>\n<p>Current code in main has </p>\n<div class=\"codehilite\"><pre><span></span><code>#endif  // USE_ANDROID_GLES2\n\n#endif  // ocpnUSE_GL\n</code></pre></div>\n<p>IMHO, the comments here are important since the #ifdef blocks involved are long (~200 lines) and it might make sense to restore them.</p>",
        "id": 395509677,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1696753884
    },
    {
        "content": "<p>in the diff: </p>\n<div class=\"codehilite\"><pre><span></span><code>-#if wxUSE_GRAPHICS_CONTEXT\n+    Init();\n+#if wxUSE_GRAPHICS_CONTEXT == 1\n</code></pre></div>\n<p>This is a bit odd way to test if wxUSE_GRAPHICS_CONTEXT is defined. The normal way is to just use <code>#if wxUSE_GRAPHICS_CONTEXT</code>, and this is the way used for all other precompiler symbols used as switches. It might make make sense to add a comment why  <code>#if wxUSE_GRAPHICS_CONTEXT == 1</code> is used.</p>",
        "id": 395510804,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1696754587
    },
    {
        "content": "<p>... and that's it.   This is all I see at a quick glance at the diff.</p>",
        "id": 395510935,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1696754664
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"400132\">@Jon</span> ^</p>",
        "id": 395535664,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1696766852
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"573239\">@Pavel Kalian</span> <br>\nHmmm...<br>\nwatchdog_pi, building on CCI workflow instead of ga, succeeds.<br>\n<a href=\"https://app.circleci.com/pipelines/github/bdbcat/watchdog_pi/85/workflows/f01e709d-de6f-41b8-a1a5-169297805f10/jobs/1607\">https://app.circleci.com/pipelines/github/bdbcat/watchdog_pi/85/workflows/f01e709d-de6f-41b8-a1a5-169297805f10/jobs/1607</a><br>\nNearly identical cl invocation, especially header paths and compiler options.<br>\nWhat could this be?</p>",
        "id": 395545580,
        "sender_full_name": "Dave Register",
        "timestamp": 1696773897
    },
    {
        "content": "<p>It seems like this has solved it for me:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/plugingl/CMakeLists.txt b/plugingl/CMakeLists.txt</span>\n<span class=\"gh\">index 8e87f28..270af7f 100644</span>\n<span class=\"gd\">--- a/plugingl/CMakeLists.txt</span>\n<span class=\"gi\">+++ b/plugingl/CMakeLists.txt</span>\n<span class=\"gu\">@@ -44,13 +44,13 @@ if (TARGET ocpn::glu_static)</span>\n<span class=\"w\"> </span>  target_link_libraries(PLUGINGL PRIVATE ocpn::glu_static)\n<span class=\"w\"> </span>endif()\n\n<span class=\"gd\">-if (WIN32)</span>\n<span class=\"gi\">+if(WIN32)</span>\n<span class=\"w\"> </span>  target_link_libraries(PLUGINGL PRIVATE windows::headers)\n<span class=\"gd\">-endif ()</span>\n<span class=\"gd\">-</span>\n<span class=\"gd\">-find_path(GLU_HEADERS NAMES GL/glu.h)</span>\n<span class=\"gd\">-if (GLU_HEADERS)</span>\n<span class=\"gd\">-  target_include_directories(PLUGINGL PRIVATE ${GLU_HEADERS})</span>\n<span class=\"gd\">-endif ()</span>\n<span class=\"gi\">+else()</span>\n<span class=\"gi\">+  find_path(GLU_HEADERS NAMES GL/glu.h)</span>\n<span class=\"gi\">+  if (GLU_HEADERS)</span>\n<span class=\"gi\">+    target_include_directories(PLUGINGL PRIVATE ${GLU_HEADERS})</span>\n<span class=\"gi\">+  endif()</span>\n<span class=\"gi\">+endif()</span>\n</code></pre></div>",
        "id": 395547182,
        "sender_full_name": "Pavel Kalian",
        "timestamp": 1696774963
    },
    {
        "content": "<p>OK, I recognize this late change.  I think it needs another tweak to verify that external windows::headers target actually exists. I'll do that.</p>",
        "id": 395547878,
        "sender_full_name": "Dave Register",
        "timestamp": 1696775489
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nI see a .clang-format.yaml in opencpn-libs already.<br>\nUse that, or replace with ocpn core version?</p>",
        "id": 395552102,
        "sender_full_name": "Dave Register",
        "timestamp": 1696778303
    },
    {
        "content": "<p>Replace with opencpn core.</p>",
        "id": 395552602,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1696778687
    },
    {
        "content": "<p>Pavel<br>\nupdated all, except clang-format.<br>\n<a href=\"https://github.com/opencpn/OpenCPN/commit/988a3d069b7b05ed7b4de7b422323b7a2f15bf00\">988a3d069b7b05ed7b4de7b422323b7a2f15bf00</a> is current.</p>",
        "id": 395552663,
        "sender_full_name": "Dave Register",
        "timestamp": 1696778727
    },
    {
        "content": "<p>Looks good, all my CI builds passed</p>",
        "id": 395555175,
        "sender_full_name": "Pavel Kalian",
        "timestamp": 1696780716
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nI re-formatted the entire \"devel\" tree to OCPN standard .clang-format.  Adopted your other recommendations. Thanks.<br>\nPavel's builds are OK, as are mine.<br>\nReady for --squash merge to \"main\"<br>\nThanks</p>",
        "id": 395574197,
        "sender_full_name": "Dave Register",
        "timestamp": 1696797100
    },
    {
        "content": "<p>Shipdriver bullseye builds fail:</p>\n<div class=\"codehilite\"><pre><span></span><code>[In file included from /home/circleci/project/opencpn-libs/plugingl/src/pidc.cpp:49:\n/home/circleci/project/opencpn-libs/plugingl/include/pidc.h:106:45: error: ‘GLint’ has not been declared\n  106 |                        wxCoord outerRadius, GLint textureID,\n      |                                             ^~~~~\n/home/circleci/project/opencpn-libs/plugingl/include/pidc.h:163:24: error: ‘GLint’ has not been declared\n  163 |   void SetTextureParms(GLint textureId, int width, int height);\n      |                        ^~~~~\n</code></pre></div>\n<p>I'll see what I can do.</p>",
        "id": 395574639,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1696797602
    },
    {
        "content": "<p>That is, almost all builds fail...</p>",
        "id": 395574712,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1696797661
    },
    {
        "content": "<p>Seems simple enough.  looks like pidc.h needs GL/gl.h</p>",
        "id": 395574858,
        "sender_full_name": "Dave Register",
        "timestamp": 1696797826
    },
    {
        "content": "<blockquote>\n<p>Seems simple enough. looks like pidc.h needs GL/gl.h</p>\n</blockquote>\n<p>... which it finds and includes if I get this correct.   But still this error..</p>",
        "id": 395576860,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1696799965
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nBuild link?  or local?</p>",
        "id": 395577105,
        "sender_full_name": "Dave Register",
        "timestamp": 1696800240
    },
    {
        "content": "<p><a href=\"https://app.circleci.com/pipelines/github/leamas/shipdriver_pi/1880/workflows/1f43c5b7-b1a6-432e-ae6a-e672e8e028f0/jobs/20048\">https://app.circleci.com/pipelines/github/leamas/shipdriver_pi/1880/workflows/1f43c5b7-b1a6-432e-ae6a-e672e8e028f0/jobs/20048</a></p>",
        "id": 395577206,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1696800311
    },
    {
        "content": "<p>Found it:   pidc.h does nto include things as it should. Seems like the includes are in pidc.cpp.  Have you time to fix?</p>",
        "id": 395577400,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1696800516
    },
    {
        "content": "<p>Yes, no problem.<br>\nI wonder why none of my builds have trouble.  Must be include order, or some such.<br>\nI'll fix.</p>",
        "id": 395577554,
        "sender_full_name": "Dave Register",
        "timestamp": 1696800705
    },
    {
        "content": "<p>Fixed.  devel branch now at:<br>\n<a href=\"https://github.com/opencpn/OpenCPN/commit/f262b101abd9f5aff184649851014330c25513fd\">f262b101abd9f5aff184649851014330c25513fd</a></p>",
        "id": 395578231,
        "sender_full_name": "Dave Register",
        "timestamp": 1696801333
    },
    {
        "content": "<p><a href=\"#narrow/stream/332168-Master---5.2E8.2E0--.28was.3A-comms.29/topic/Code.20formatting/near/395577098\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"332168\" href=\"/#narrow/stream/332168-Master---5.2E8.2E0--.28was.3A-comms.29/topic/Common.20plugin.20library\">#Master - 5.8.0  (was: comms) &gt; Common plugin library</a> by <span class=\"user-mention silent\" data-user-id=\"399510\">Alec Leamas</span>.</p>",
        "id": 395578693,
        "sender_full_name": "Notification Bot",
        "timestamp": 1696801856
    },
    {
        "content": "<p>2 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"332168\" href=\"/#narrow/stream/332168-Master---5.2E8.2E0--.28was.3A-comms.29/topic/Common.20plugin.20library\">#Master - 5.8.0  (was: comms) &gt; Common plugin library</a> by <span class=\"user-mention silent\" data-user-id=\"399510\">Alec Leamas</span>.</p>",
        "id": 395578709,
        "sender_full_name": "Notification Bot",
        "timestamp": 1696801872
    },
    {
        "content": "<p>3 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"332168\" href=\"/#narrow/stream/332168-Master---5.2E8.2E0--.28was.3A-comms.29/topic/Code.20formatting\">#Master - 5.8.0  (was: comms) &gt; Code formatting</a> by <span class=\"user-mention silent\" data-user-id=\"399510\">Alec Leamas</span>.</p>",
        "id": 395578727,
        "sender_full_name": "Notification Bot",
        "timestamp": 1696801901
    },
    {
        "content": "<p>OK, now builds OK  for Shipdriver as well.</p>",
        "id": 395578815,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1696801993
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"517002\">@Dave Register</span> One curios questions while merging devel into main: What are the changes in plugingl all about? That is, any hint for a commit message?</p>",
        "id": 395579199,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1696802439
    },
    {
        "content": "<p>Anyway,  main now on b22adb2, identical to devel better but history more or less squashed.</p>",
        "id": 395579943,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1696803232
    },
    {
        "content": "<p>Message something like:<br>\n\"Extend pidc class to add additional rendering methods., e.g. tessellated polygons, bitmaps, etc\".<br>\nThanks for the commit.</p>",
        "id": 395583504,
        "sender_full_name": "Dave Register",
        "timestamp": 1696806982
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nSorry, no.  OpenCPN/opencpn-libs branch main has not been updated at github.<br>\nPlease advise.</p>",
        "id": 395587930,
        "sender_full_name": "Dave Register",
        "timestamp": 1696811031
    },
    {
        "content": "<p>Damned. I pushed to the wrong remote (my own).  This is what's happening at late nights...   </p>\n<p>Sorry. Now fixed.</p>",
        "id": 395635016,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1696836230
    },
    {
        "content": "<p>Got it, thanks.</p>",
        "id": 395789441,
        "sender_full_name": "Dave Register",
        "timestamp": 1696902304
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nNearly finished with adapting Rick's plugins to opencpn-libs.<br>\nAs expected, we found a couple of tweaks needed in opencpn-libs.  These tweaks are required for full functionality of certain plugins.<br>\nI request a review and merge of devel-&gt;main at your convenience.</p>",
        "id": 396514853,
        "sender_full_name": "Dave Register",
        "timestamp": 1697206624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nRecently appeared this error in several plugins builds:</p>\n<div class=\"codehilite\"><pre><span></span><code>sudo add-apt-repository -y ppa:alexlarsson/flatpak\nCannot add PPA: &#39;ppa:~alexlarsson/ubuntu/flatpak&#39;.\nThe user named &#39;~alexlarsson&#39; has no PPA named &#39;ubuntu/flatpak&#39;\nPlease choose from the following available PPAs:\n\n * &#39;flatpak&#39;:  Flatpak\n * &#39;glib260&#39;:  Glib 2.60\n</code></pre></div>\n\n<p>Thoughts?</p>",
        "id": 396519404,
        "sender_full_name": "Dave Register",
        "timestamp": 1697208201
    },
    {
        "content": "<p>I pushed your changes to main. Added a new commit which completely removed the ancient IMPLEMENT_DYNAMIC_CLASS which I presume is a left over from older c++ environments.</p>",
        "id": 396633028,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1697275121
    },
    {
        "content": "<p>The plugin builds looks strange, actually like a bug in add-apt-repository.  Have you got a build link?<br>\nSeems to not happen to shipdriver, the flatpak build looks fine: <a href=\"https://app.circleci.com/pipelines/github/leamas/shipdriver_pi/1882/workflows/7be91a85-10fd-4730-b404-e818bf16310c/jobs/20090\">https://app.circleci.com/pipelines/github/leamas/shipdriver_pi/1882/workflows/7be91a85-10fd-4730-b404-e818bf16310c/jobs/20090</a></p>\n<p>Old  host running the build? You might want to compare <em>.circleci/config</em> to shipdriver</p>",
        "id": 396633211,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1697275284
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nThanks.<br>\nThe wxWidgets legacy RTTI stuff can be removed everywhere.  It can be particularly annoying in debug mode.  It will ASSERT if the same class is instantiated twice.  This does happen in plugin environment (e.g.wxCURL dialogs and events used in multiple plugins).<br>\nGood riddance.<br>\nFlatpak builds:  It seems to be some transient.  The builds will complete, usually, if retried.<br>\nJust another CCI quirk.<br>\nFailing log:<br>\n<a href=\"https://app.circleci.com/pipelines/github/rgleason/testplugin_pi/393/workflows/d759e103-a35d-450e-b412-5450247b57f4/jobs/4424\">https://app.circleci.com/pipelines/github/rgleason/testplugin_pi/393/workflows/d759e103-a35d-450e-b412-5450247b57f4/jobs/4424</a></p>",
        "id": 396653544,
        "sender_full_name": "Dave Register",
        "timestamp": 1697292183
    },
    {
        "content": "<blockquote>\n<p>Flatpak builds: It seems to be some transient.</p>\n</blockquote>\n<p>Same experience with my builds of ShipDriver and others.</p>",
        "id": 396660477,
        "sender_full_name": "Mike Rossiter",
        "timestamp": 1697298268
    },
    {
        "content": "<p>Well, looking at that error message I cannot really fathom how this would be about our code. For now assuming that this is due to external problems in circleci and/or the ubuntu repos.</p>",
        "id": 397264664,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1697619619
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"517002\">@Dave Register</span>  Last  commit  to opencpn-libs gives new error for shipdriver android builds.</p>\n<div class=\"codehilite\"><pre><span></span><code>/home/circleci/project/opencpn-libs/plugingl/include/pidc.h:34:10: fatal error: &#39;GL/gl_private.h&#39; file not found\n#include &quot;GL/gl_private.h\n</code></pre></div>\n<p>Failing commit  <a href=\"https://github.com/opencpn/OpenCPN/commit/98ec0548cb\">98ec0548cb</a>, last good commit  <a href=\"https://github.com/opencpn/OpenCPN/commit/7ca85b14b\">7ca85b14b</a>.  My bad, should have tested before merging to main. </p>\n<p>Build link:  <a href=\"https://app.circleci.com/pipelines/github/leamas/shipdriver_pi/1885/workflows/ee19e011-0c80-4d3e-92b2-6f97444ff037\">https://app.circleci.com/pipelines/github/leamas/shipdriver_pi/1885/workflows/ee19e011-0c80-4d3e-92b2-6f97444ff037</a></p>",
        "id": 397665706,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1697793163
    },
    {
        "content": "<p>Nope, the other way around: failing commit 7ca85b1, last good commit 9e502bf</p>",
        "id": 397674725,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1697796426
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nAs I mentioned once before, the GL support in opencpn-libs is a rats nest, and needs some refactoring.<br>\nFor now, the best solution is to add to plugin.cmake:</p>\n<div class=\"codehilite\"><pre><span></span><code>    add_subdirectory(opencpn-libs/glu)\n    target_link_libraries(${PACKAGE_NAME} ocpn::glu_static)\n</code></pre></div>\n\n<p>Sorry for the problem, hope this is not too disruptive.</p>",
        "id": 397712577,
        "sender_full_name": "Dave Register",
        "timestamp": 1697809321
    },
    {
        "content": "<p>Not that disruptive, but why can't we just add that dependency to plugingl?</p>",
        "id": 397712950,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1697809442
    },
    {
        "content": "<p>ah... I see. It's there, but optional. I'll look into it.</p>",
        "id": 397713184,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1697809510
    },
    {
        "content": "<blockquote>\n<p>As I mentioned once before, the GL support in opencpn-libs is a rats nest</p>\n</blockquote>\n<p>Indeed.</p>",
        "id": 397713901,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1697809714
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"517002\">@Dave Register</span>   The plot thickens. Android uses GLES which is more or less a subset of GL,  right?</p>\n<p>The current build uses GL/gl_private.h. I think we can agree that this is not a good idea. However, most (all)  of the required symbols exists in GL/gl.h. But that file does not exist on android for good reasons, so the build should use GLES/gl.h.</p>\n<p>This gives a some undefined. GLDouble does not worry me that much. However, there are also missing definitions of GL_POLYGON_SMOOTH and  GL_LINE_STIPPLE.  Does this reflect the actual limitations in GLES as compared to GL, or what?</p>",
        "id": 397720769,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1697811760
    },
    {
        "content": "<p>Seems like pidc has a hard dependency on glu, right?  But glu does not exist on Android. What does this mean?</p>",
        "id": 397722633,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1697812279
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\ngl_private is very old cruft from early Android days, and needs to die.<br>\npidc does hard-depend on glu.  This is new, coming from the new rendering methods added for tesselated objects.<br>\nMaybe what is needed is a refactor, building an interface lib to bring in the correct platform specific header locations.  Then make glu depend on that interface lib.<br>\nGotta go now, back later.</p>",
        "id": 397724518,
        "sender_full_name": "Dave Register",
        "timestamp": 1697812862
    },
    {
        "content": "<p>The short question is: is GLU supported by the GLES implementation on Android?</p>\n<p>I'll make it build without includes for now.</p>",
        "id": 397724849,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1697812930
    },
    {
        "content": "<p>I just bundled  gl_private.h into plugingl. It compiles, but I'm suspicious about if it works. The standard android headers seems to indicate that these functions are not generally available.</p>",
        "id": 397740204,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1697817708
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> </p>\n<p>Short answer:  Yes.<br>\nglu is a platform agnostic set of utilities mainly used for composition of complex 2D shapes into arrays of triangles.  Our current troubles are largely the result of cross compilation environment, where we cannot use the system GL headers.</p>\n<p>Elaborate, please?<br>\n\" The standard android headers seems to indicate that these functions are not generally available.\"</p>\n<p>More:<br>\nI find that we can eliminate gl_private.h by a simple preprocessor definition that allows a common gl.h and glu.h to be used in pidc.h and .cpp</p>\n<div class=\"codehilite\"><pre><span></span><code>#ifdef __ANDROID__\n#include &lt;qopengl.h&gt;\n//#include &quot;GL/gl_private.h&quot;\n\n#define GL_GLEXT_LEGACY 1\n#include &quot;GL/gl.h&quot;\n#include &quot;GL/glu.h&quot;\n</code></pre></div>\n\n<p>This change causes gl.h to avoid loading glext.h, thus avoiding some typedef redefinition problems.<br>\nMore testing needed, but I am on it.</p>",
        "id": 397771433,
        "sender_full_name": "Dave Register",
        "timestamp": 1697833333
    },
    {
        "content": "<p>My <strong>extremely</strong> limited understanding is that GLES  and GLES2 are  subsets of GL.  And that the android API only supports  GLES/GLES2.          </p>\n<p>There seems to be some abandoned attempt to port at least a subset of glu to GLES, but they seem  not healthy.</p>\n<p>As I understand it we are in a bad place when we try to run code which requires GL on GLES. But then again, I don't understand much.</p>",
        "id": 397776184,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1697835953
    },
    {
        "content": "<p>It is true that GLES and GLES2 are functional subsets of classic GL.<br>\nBut this does not involve glu.  glu is straight-forward C code, with no hardware dependencies.<br>\nIndeed, GLES2 is now becoming the preferred API for all GL programming.  The reason is that only GLES will give programmatic access to the GPU, thus offloading much of the graphics nuts and bolts to that independent processor stack.  Huge performance win.</p>\n<p>Proof, if required:  we have been using glu on OCPN Android since forever.  Has always been fiddly to get the headers right.  But experience shows that if it compiles, it will run.</p>",
        "id": 397777284,
        "sender_full_name": "Dave Register",
        "timestamp": 1697836628
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nYou may be referring to something known as as a GL-Shim.  This is a piece of very state-aware code that intercepts traditional GL calls, and performs the desired on-screen action using GLES instead.  Was concocted in early days of GLES, help support legacy GL apps.  Not much used anymore, now that devs (including us) have come up to speed with GLES.</p>",
        "id": 397777635,
        "sender_full_name": "Dave Register",
        "timestamp": 1697836840
    },
    {
        "content": "<blockquote>\n<p>But this does not involve glu. glu is straight-forward C code, with no hardware dependencies.</p>\n</blockquote>\n<p>OK, this is my missing piece. So glu can run on top of GLES, without GL?</p>",
        "id": 397777877,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1697837025
    },
    {
        "content": "<blockquote>\n<p>Not much used anymore, now that devs (including us) have come up to speed with GLES.</p>\n</blockquote>\n<p>Reasonable. BUt why  would we then include GL/whatever.h  on android?</p>",
        "id": 397778972,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1697837850
    },
    {
        "content": "<p>\"Confused\". Bedtime!</p>",
        "id": 397779196,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1697837996
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nSome study.  The picture becomes more clear.</p>\n<ol>\n<li>On most platforms we support, glu is provided by the system along with the base opengl headers and libraries.</li>\n<li>However, there is no standard glu for GLES/GLES2.  This means we need a private version of a glu-compatible library for Android.</li>\n<li>And we have that. The code of opencpn-libs/glu is a partial port of glu provided by SGI, licensed as compatible with GPL.</li>\n<li>In point of fact, we are using our private(SGI)  glu for all TP template plugin builds, , on all platforms, for no particular reason other than code commonality.  Not exactly the linux way, but as I have said, glu is just simple C code.  If it works, it works.</li>\n</ol>\n<p>So, coming to the question of GL/gl.h, vs GLES2/gl.h.<br>\nHistory shows that we can safely use a generic GL/gl.h, even on GLES2.  The constants, typedefs, and functions that we use are fully compatible between GL and GLES. Further, we actually need to use it, since the SGI glu is actually written against GL, not GLES.<br>\nWe could switch to GLES/gl2.h if we want to look nice.  If we did that, we would have to privately typedef glDouble at least.  This typedef is missing from GLES.  But we would need it to be compatible with glu (SGI).</p>\n<p>This is all a little unavoidably muddy, since we are using the same code base for GL and GLES.  Bound to be some funny #ifdefs.</p>",
        "id": 397792131,
        "sender_full_name": "Dave Register",
        "timestamp": 1697847978
    },
    {
        "content": "<p>Seen from another point of view the situation is then</p>\n<ol>\n<li>plugingl has a hard dependency on glu</li>\n<li>We resolve this using our own glu library in glu/ on all platforms.</li>\n<li>Our glu/ library pulls in GL/gl.h on all platforms, even those using GLES</li>\n</ol>\n<p>I have problems with 2. However. it should be simple to modify glu/ to use system glu if available and otherwise fall back to the bundled implementation.</p>\n<p>Since it is glu/ which makes the need of GL/gl.h required it is also glu/ which should provide this header's include dir. That is, linking to ocpn::glu_static should provide all necessary headers (and of course libraries).</p>\n<p>Since plugingl-&gt;glu is a hard dependency  it cannot be optional as now. One solution could be to make the overall build fail with a proper message if the plugin hasn't included the glu/ library. Another, probably better one would be to move the glu/ library so it becomes a subdirectory of plugingl which then just could pull it in.</p>\n<p>I'll try to do some experiments.</p>",
        "id": 397825865,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1697873541
    },
    {
        "content": "<p>working... The need to include the complete gl.h can be avoided by adding 5 #defines from gl.h. This is IMHO more visible and thus better. Please stay tuned.</p>",
        "id": 397834003,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1697881563
    },
    {
        "content": "<p>I have pushed a sketch to a new branch <em>plugingl</em>. That is, I pushed it somewhere...</p>\n<p>The changes:</p>\n<ul>\n<li>Created a new include file <em>glu_gl.h</em>. It's quite small, contains the bits and pieces glu requires from gl.h. Currently available at <em>plugingl/utils/include/android/glu_gl.h</em>,  the location needs a review...</li>\n<li>Made plugingl to a top directory for two subdirectories. Overall, it exports opengl and glu as required.</li>\n<li>The glu subdirectory is a verbatim copy of  opencpn/glu. It's built on platforms without native glu support.</li>\n<li>The utils subdirectory is the current plugingl stuff.</li>\n</ul>\n<p>Thoughts?</p>",
        "id": 397837609,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1697884662
    },
    {
        "content": "<p>The utils library has a painful dependency on ocpn::api.  It's pidc.cpp which requires ocpn_plugin.h. Im not that happy with this dependency, perhaps it would be better to bundle ocpn_plugin.h with plugingl?</p>",
        "id": 397838370,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1697885312
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"399510\">Alec Leamas</span> <a href=\"#narrow/stream/332168-Master---5.2E8.2E0--.28was.3A-comms.29/topic/Common.20plugin.20library/near/397838370\">said</a>:</p>\n<blockquote>\n<p>Im not that happy with this dependency, perhaps it would be better to bundle ocpn_plugin.h with plugingl?</p>\n</blockquote>\n<p>Wouldn't that be another pain that will possibly eat our kittens with future plugin API updates?</p>",
        "id": 397842605,
        "sender_full_name": "Pavel Kalian",
        "timestamp": 1697887636
    },
    {
        "content": "<p>Not necessarily. This copy would only be used by the code in plugingl, it  should definitely not be exported. So as long as we keep our API compatibility promise, the only thing which should require an update of it would be an update of the files in plugingl/utils (actually, pidc.cpp).</p>",
        "id": 397843095,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1697888146
    },
    {
        "content": "<p>plugin overall links to ocpn:.api which is some version of the api like api-17, api-18, etc. But that's another story.</p>",
        "id": 397843186,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1697888226
    },
    {
        "content": "<p>WTF... That dependency is not even used! Will fix.</p>",
        "id": 397843409,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1697888458
    },
    {
        "content": "<p>.,.. nope, it was just included in multiple places.</p>",
        "id": 397843651,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1697888665
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"517002\">@Dave Register</span>  pidc.cpp also have </p>\n<div class=\"codehilite\"><pre><span></span><code>#ifdef ocpnUSE_GL\n#include &lt;wx/glcanvas.h&gt;\n#endif\n</code></pre></div>\n<p>Isn't ocpnUSE_GL supposed to be true in this context?</p>",
        "id": 397844257,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1697889152
    },
    {
        "content": "<p>The opencpn-libs plugingl is  currently broken for flatpak builds, I'm on it, but there is some other life as well.</p>",
        "id": 397849886,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1697894468
    },
    {
        "content": "<p>plugingl now also builds Flatpak</p>",
        "id": 397852472,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1697897025
    },
    {
        "content": "<p>... but not windows</p>",
        "id": 397859921,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1697903293
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\n\"Isn't ocpnUSE_GL supposed to be true in this context?\"<br>\nWell, no, not necessarily.  Actually, piDC is a generalized DisplayContext, usable in non-GL environments as well. The idea is (was) to allow access to the lib methods using no conditional code (e.g. #ifdef ocpnUSE_GL)in the caller.  At one point, I debated renaming the entire subdirectory to something like \"pluginDC\".  But I retreated when I saw that this would seriously break ShipDriver.</p>",
        "id": 397877301,
        "sender_full_name": "Dave Register",
        "timestamp": 1697921825
    },
    {
        "content": "<blockquote>\n<p>Actually, piDC is a generalized DisplayContext, </p>\n</blockquote>\n<p>Indeed. However, in this plugingl context ocpnUSE_GL should be set  since including plugingl means adding GL capabilities. Or?</p>\n<blockquote>\n<p>I debated renaming the entire subdirectory to something like \"pluginDC\"</p>\n</blockquote>\n<p>This could  be done in the new plugingl branch without breaking anything since it is a subdirectory under plugingl. Will do.</p>",
        "id": 397919003,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1697958728
    },
    {
        "content": "<p>The plugingl branch is ready for review. In particular, I would appreciate if you could check it in other contexts (TP).  It builds fine in shipdriver.</p>\n<p>As of now I think it represents a reasonable refactoring of the plugingl/glu mess, offering a plugin one stop shop for the  openGL stuff. Both the glu/ and libglu/ could and should be retired.</p>\n<p>Thoughts?</p>",
        "id": 397927488,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1697964770
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nWhat should I glean from this?</p>",
        "id": 397945222,
        "sender_full_name": "Dave Register",
        "timestamp": 1697981535
    },
    {
        "content": "<p>googling \"glean meaning\"</p>",
        "id": 397945256,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1697981592
    },
    {
        "content": "<p>I'd really appreciate input on two aspects:</p>\n<ol>\n<li>Does it build also for TP (have no working such setup)</li>\n<li>Does the overall structure of  plugingl looks sound? Four eyes hopfully sees more than two.</li>\n</ol>",
        "id": 397945363,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1697981697
    },
    {
        "content": "<p>That is, if I got \"glean\" right. Did I?</p>",
        "id": 397945378,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1697981716
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nYes, but maybe this is not the best zulip thread.  I see your comments in \"common plugin library\" thread, and I'm on it.</p>",
        "id": 397945579,
        "sender_full_name": "Dave Register",
        "timestamp": 1697981929
    },
    {
        "content": "<p>5 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"342818\" href=\"/#narrow/stream/342818-CI/topic/shipdriver_pi\">#CI &gt; shipdriver_pi</a> by <span class=\"user-mention silent\" data-user-id=\"399510\">Alec Leamas</span>.</p>",
        "id": 397945614,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697981983
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nStructure seems OK.<br>\nAndroid builds fails.  Ediited compiler invocation:</p>\n<div class=\"codehilite\"><pre><span></span><code>-I/home/dsr/Projects/statusbar_pi/build_android_32/CMakeFiles/include \n-I/home/dsr/Projects/statusbar_pi/src \n-I/home/dsr/Projects/statusbar_pi/opencpn-libs/plugingl/plugin_dc/include/android \n-I/home/dsr/Projects/statusbar_pi/opencpn-libs/plugingl/plugin_dc/include \n-I/home/dsr/Projects/statusbar_pi/opencpn-libs/api-17 \n-I/home/dsr/Projects/statusbar_pi/opencpn-libs/glu/include\n\nIn file included from /home/dsr/Projects/statusbar_pi/opencpn-libs/plugingl/plugin_dc/src/pidc.cpp:48:\n/home/dsr/Projects/statusbar_pi/opencpn-libs/plugingl/plugin_dc/include/pidc.h:37:10: fatal error: &#39;glu_gl.h&#39; file not found\n</code></pre></div>\n\n<p>I change \"glu_gl\" to \"GL/glu_gl\".  No help.<br>\nThe correct header location </p>\n<div class=\"codehilite\"><pre><span></span><code>&quot;/home/dsr/Projects/statusbar_pi/opencpn-libs/plugingl/glu/include&quot;\n</code></pre></div>\n\n<p>is not in the list above</p>",
        "id": 397949088,
        "sender_full_name": "Dave Register",
        "timestamp": 1697985500
    },
    {
        "content": "<p>Hm... this strange situation again: what''s the difference betwenen your builds and mine which works? Have you got a complete build log?<br>\nEDIT link, that is</p>",
        "id": 397949367,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1697985746
    },
    {
        "content": "<p>hm... testing a possible fix. Stay tuned.</p>",
        "id": 397950468,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1697986838
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nSlight tweak to TP  required. He loads opencpn-libs/glu/ by default.  This means that the plugingl/ load later skips the glu/ part.  That somehow prevents the correct header path from coming in.  If I drop that initial glu/ load, all is well on Android.<br>\nI think I can remove that default behavior in TP, and depend on the plugingl \"one-stop-shop\" to do the right thing.<br>\nThis is healthy, since we can then drop the separate \"glu/\" entirely.  One less subdir to wonder about.</p>\n<p>Another small CMake glitch.  The directive </p>\n<p>set(CMAKE_POSITION_INDEPENDENT_CODE ON)</p>\n<p>Seems to be required BEFORE any \"add_library\" directive.<br>\nplugin_dc/CMakeLists.txt:</p>\n<div class=\"codehilite\"><pre><span></span><code>set(CMAKE_POSITION_INDEPENDENT_CODE ON)\n\nadd_library(_PLUGIN_DC STATIC ${SRC})\nadd_library(ocpn::plugin_dc ALIAS _PLUGIN_DC)\n\n#set(CMAKE_POSITION_INDEPENDENT_CODE ON)\n</code></pre></div>",
        "id": 397951278,
        "sender_full_name": "Dave Register",
        "timestamp": 1697987530
    },
    {
        "content": "<p>btw, builds OK on debian 12, properly finds and uses system GLU<br>\nGood.</p>",
        "id": 397951410,
        "sender_full_name": "Dave Register",
        "timestamp": 1697987667
    },
    {
        "content": "<p>If not obvious, merging this as-is to \"main\" will break all Android TP builds.  Just sayin'.</p>",
        "id": 397951616,
        "sender_full_name": "Dave Register",
        "timestamp": 1697987844
    },
    {
        "content": "<p>Right... the problem is of course that glu/ and plugingl/glu uses the same symbols  which then \"collides\". I'll try to fix that.</p>\n<p>CMAKE_POSITION_INDEPENDENT_CODE is a good catch as well, will fix. Stay tuned.</p>",
        "id": 397952743,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1697988702
    },
    {
        "content": "<p>We should of course not merge anything until we agree on it, and we should not break any android builds.  That said, just  merging to main does not change anything for the plugins until they update their own version of opencpn-libs. So, there are some safety nets.</p>",
        "id": 397954247,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1697990393
    },
    {
        "content": "<p>I have pushed  some new commits to the plugingl branch. Fixes since last push:</p>\n<ul>\n<li>The CMAKE_POSITION_INDEPENDENT_CODE stuff</li>\n<li>Including openpn-libs/glu  now terminates the build with a hopefully clarifying message(?)</li>\n<li>The include paths for the bundled glu, the one used by Android, has a bugfix.</li>\n</ul>\n<p>glu_gl.h does not live in <em>GL/glu_gl.h</em>, its just <code>#include &lt;glu_gl.h&gt;</code> </p>\n<p>Could you possibly give it a try?</p>",
        "id": 397954629,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1697990638
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nIf I use unmodified plugin source, I get the nice clear message, and the build stops.  As expected.<br>\nAfter I modify plugin source to avoid adding glu/, then all is well.</p>\n<p>I still have the idea of renaming plugingl/ to something more generic, like \"plugindc/\".  The idea is this:<br>\n\"If you need to draw on the chart surface, simply add subdir \"plugindc/\".  All GL dependencies will be handled automagically, for all platforms.\"</p>\n<p>Now would be a good time.<br>\nThoughts?</p>",
        "id": 397968274,
        "sender_full_name": "Dave Register",
        "timestamp": 1698004342
    },
    {
        "content": "<p>Not really fond of the idea, it would IMHO break too many builds with little advantage. </p>\n<p>Why not add that sentence to a new plugingl/README.md file? Such a file would allow for much more info than the hint in a filename...</p>",
        "id": 397968456,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1698004547
    },
    {
        "content": "<p>Every TP build against merge will fail on all platforms, since they all add glu/.<br>\nSo we (Rick and I) will be rebuilding them anyway.<br>\nMaybe a manageable number of other builds beyond TP?</p>",
        "id": 397969064,
        "sender_full_name": "Dave Register",
        "timestamp": 1698005073
    },
    {
        "content": "<p>That is just to say that we should not care about Mike. If this was important, but... plugindc instead of plugingl isn't  that much of a change.</p>\n<p>My idea is a README, something  like below. It's way more information than what's conveyed in a name:</p>\n<div class=\"codehilite\"><pre><span></span><code>plugingl README\n==============\n\nThis directory contains all necessary GL dependencies as well as\nsome utilities for drawing on the chart canvas. All supported\nplatforms are handled.\n\nFor plugins requiring the OpenGL setup for drawings this library\ncontains all necessary dependencies for all platforms.\n\nThe formerly  separate libraries glu and libglu are part of\nplugingl and will be retired.\n</code></pre></div>",
        "id": 397969246,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1698005322
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399559\">@Mike Rossiter</span>  Ping? The question is if you are using <code>add_submodule(opencpn-libs/glu)</code> in a substantial number of plugins?</p>",
        "id": 397969434,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1698005578
    },
    {
        "content": "<p>Wordsmithing:<br>\nI would turn this around.</p>\n<p>Instead of</p>\n<div class=\"codehilite\"><pre><span></span><code>This directory contains all necessary GL dependencies as well as\nsome utilities for drawing on the chart canvas. All supported\nplatforms are handled.\n</code></pre></div>\n\n<p>I would say</p>\n<div class=\"codehilite\"><pre><span></span><code>This directory contains classes and methods useful for drawing on the charts surface.\nAll required GL dependencies are handled internally.\n</code></pre></div>\n\n<p>That is to shift the focus.  The directory is about drawing, using GL if desired.  There is no interest in GL if one is not planning to draw.</p>",
        "id": 397969614,
        "sender_full_name": "Dave Register",
        "timestamp": 1698005770
    },
    {
        "content": "<p>Please, you are the one who knows this stuff. Can you rephrase it in a better way?</p>",
        "id": 397969672,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1698005861
    },
    {
        "content": "<p>Also note as of now,  ocpnUSE_GL is hardcoded as set. If user should be able to change this  we must export it as a cmake variable to keep things sane.  No big deal if required.</p>",
        "id": 397969858,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1698006015
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>This directory contains classes and methods useful for drawing on the charts surface.\nIt is usable on all platforms.  All required GL dependencies are handled internally.\n</code></pre></div>\n\n<p>Clear, or mush?</p>",
        "id": 397969889,
        "sender_full_name": "Dave Register",
        "timestamp": 1698006057
    },
    {
        "content": "<p>Much better. I just don't understand it well enough, and pidgin Englisch tends to be longer. I'll make a commit.<br>\nSee above on ocpnUSE_GL</p>",
        "id": 397969969,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1698006143
    },
    {
        "content": "<p>Pushed. Please feel free to change...</p>",
        "id": 397970114,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1698006299
    },
    {
        "content": "<p>ocpnUSE_GL:<br>\nIf should be possible to override default in CMake invocation, sure.<br>\nI note in passing that OCPN core has some build problems if ocpnUSE_GL is not set.  Long standing fiddly problem.</p>",
        "id": 397970130,
        "sender_full_name": "Dave Register",
        "timestamp": 1698006313
    },
    {
        "content": "<p>OK, stay tuned.</p>",
        "id": 397970192,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1698006375
    },
    {
        "content": "<p>Pushed. Starting a full rebuild.</p>",
        "id": 397970590,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1698006864
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"517002\">@Dave Register</span>  </p>\n<p>All shipdriver builds OK. Shall we wait for input from <span class=\"user-mention\" data-user-id=\"399559\">@Mike Rossiter</span>  before we decide on renaming before we merge?</p>\n<p>Besides the name, are you happy with current state?</p>",
        "id": 397971050,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1698007437
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nLet's wait to hear from Mike.<br>\nOtherwise, I'm content.</p>",
        "id": 397978353,
        "sender_full_name": "Dave Register",
        "timestamp": 1698016292
    },
    {
        "content": "<blockquote>\n<p>The question is if you are using add_submodule(opencpn-libs/glu)</p>\n</blockquote>\n<p>opencpn-libs/glu is not being used directly in any of my plugins. There may be an impact with plugins that use a private <em>libs/plugingl</em> that references <code>OpenGL/glu.h</code> from <em>opencpn-libs/plugingl</em> but I can deal with that. My understanding of all this stuff is zero. I just use it.</p>",
        "id": 398032030,
        "sender_full_name": "Mike Rossiter",
        "timestamp": 1698048016
    },
    {
        "content": "<p>Dave and I have been working with sorting out the opencpn-libs mess which currently consists of glu/, libglu/ and plugingl/. The plan is to merge everything to plugingl.</p>\n<p>There is a common understanding between the two of us that it would be better to rename plugingl to plugindc. However, this obviously requires rebuilding all plugins. </p>\n<p>For technical reasons all plugins using glu/  must also be rebuilt. For TP, this means that renaming plugingl to plugindc doesn't really matter, they have to to rebuild anyway since they include <em>opencpn-libs/glu</em>.</p>\n<p>Now, for shipdriver plugins the situation is then different. If we don't change plugingl to plugindc there is no need to rebuild since you don't include  <em>opencpn-libs/glu</em>. </p>\n<p>Have I been able to explain the situation? If so, your thoughts on this?<br>\nEDIT: That is, your thoughts on changing the name plugingl to plugindc.</p>",
        "id": 398037936,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1698050473
    },
    {
        "content": "<p>BTW: The new plugingl/plugindc automatically sorts out the glu.h dependencies once and for all.</p>",
        "id": 398038449,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1698050682
    },
    {
        "content": "<blockquote>\n<p>your thoughts on changing the name plugingl to plugindc.</p>\n</blockquote>\n<p>Using the name plugindc makes sense to me, in view of the changes.</p>",
        "id": 398044176,
        "sender_full_name": "Mike Rossiter",
        "timestamp": 1698052721
    },
    {
        "content": "<p>That is, you are OK with that you have to rebuild?</p>",
        "id": 398045578,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1698053237
    },
    {
        "content": "<p>What stops a plugin already in the catalog running with OpenCPN 5.8.4?</p>",
        "id": 398046104,
        "sender_full_name": "Mike Rossiter",
        "timestamp": 1698053430
    },
    {
        "content": "<p>Before we are heading into that: OK to make the rename which will force you to rebuild? Double-checking...</p>",
        "id": 398047899,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1698054088
    },
    {
        "content": "<blockquote>\n<p>OK to make the rename which will force you to rebuild?</p>\n</blockquote>\n<p>Yes it is OK.</p>",
        "id": 398048142,
        "sender_full_name": "Mike Rossiter",
        "timestamp": 1698054166
    },
    {
        "content": "<p>OK, back to \"What stops a plugin already in the catalog running with OpenCPN 5.8.4\" . What is the problem?</p>",
        "id": 398049693,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1698054713
    },
    {
        "content": "<p>Example otcurrent v4.2.0. In the catalog. Uses piDC. Runs fine. Does not build for Android but I have not yet modified it for Android. If I don't want to build it for Android will it still run for the other OS?</p>",
        "id": 398051127,
        "sender_full_name": "Mike Rossiter",
        "timestamp": 1698055185
    },
    {
        "content": "<p>Sure.  To avoid failing builds: edit build-conf-rc and set </p>\n<div class=\"codehilite\"><pre><span></span><code>android_build_rate=0\nandroid_upload=&quot;false&quot;\nandroid_git_push=&quot;false&quot;\n</code></pre></div>\n<p>This will make git-push happy and make corresponding auto branch.</p>",
        "id": 398052004,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1698055488
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 398052726,
        "sender_full_name": "Mike Rossiter",
        "timestamp": 1698055782
    },
    {
        "content": "<p>You are not alone. For example, the famous radar_pi also excludes Android.</p>\n<p>The core issue: Most platforms support the full OpenGL stack  i. e <em>GL/gl.h</em>. However, Android only supports <em>GLES2/gl2.h</em> which is a subset of <em>GL/gl.h</em>. As long as the plugin only uses this subset all is fine, but if it uses some obscure method in <em>GL/gl.h</em> which is not part of <em>GLES2/gl2.h</em> this must be fixed somehow.</p>\n<p>However, the new <em>plugin_dc</em> module under way fixes most if not all of these problems.  Android is probably simpler once it arrives in opencpn-libs.</p>",
        "id": 398053588,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1698056126
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"517002\">@Dave Register</span>  I have pushed a plugingl squashed history to devel which now is identical to plugingl -- this branch is to be removed.</p>\n<p>The new name is plugin_dc (not pluginDC, we stick to google GL: no capitals in filenames)</p>\n<p>Unless you have any late concerns after a night's  sleep we can merge devel into main any time.</p>",
        "id": 398058596,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1698058241
    },
    {
        "content": "<p>Added some stuff to README.md about configuring without OpenGL</p>",
        "id": 398059643,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1698058659
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nI reviewed the devel branch.  Looks clean to me, ready to merge.<br>\nAfter merge I will confirm by updating opencpn-libs and doing some Android test builds.</p>",
        "id": 398103690,
        "sender_full_name": "Dave Register",
        "timestamp": 1698073006
    },
    {
        "content": "<p>Merged and pushed</p>",
        "id": 398106411,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1698073757
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nSeveral build problems.<br>\nWindows, flatpak, Mac, Android.</p>\n<p>Here is my library setup in CMakeLists.txt</p>\n<div class=\"codehilite\"><pre><span></span><code>add_subdirectory(opencpn-libs/api-17)\ntarget_link_libraries(${PACKAGE_NAME} ocpn::api)\n\nadd_subdirectory(opencpn-libs/wxJSON)\ntarget_link_libraries(${PACKAGE_NAME} ocpn::wxjson)\n\nadd_subdirectory(opencpn-libs/plugin_dc)\ntarget_link_libraries(${PACKAGE_NAME} ocpn::dc-utils)\n</code></pre></div>\n\n<p>Build logs:<br>\n<a href=\"https://app.circleci.com/pipelines/github/bdbcat/statusbar_pi?branch=master\">https://app.circleci.com/pipelines/github/bdbcat/statusbar_pi?branch=master</a></p>",
        "id": 398182092,
        "sender_full_name": "Dave Register",
        "timestamp": 1698111584
    },
    {
        "content": "<p>Sigh. This must be the last time we merge things without fully testing them. I'm on it.</p>",
        "id": 398221830,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1698131599
    },
    {
        "content": "<p>Perhaps not a problem in opencpn-libs. You have linked to the <code>ocpn::dc-utils</code> target. You need to use the overall  <code>ocpn::plugin-dc</code> instead. </p>\n<p>I have checked that this fixes it for Flatpak. Also checked README.md which uses the correct target.</p>\n<p>Macos seems to be the same issue as Flatpak, hopefully fixed the same way. Have not checked.</p>\n<p>For windows, you need to conditionally include WindowsHeaders using  <code>if (MSVC)</code>or so.</p>",
        "id": 398225557,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1698132985
    },
    {
        "content": "<p>Android... I don't see what this is all about. But we need to get rid of the other errors before looking into that if problem persists.</p>",
        "id": 398226880,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1698133508
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nOK, changed to ocpn::plugin-dc, added WindowsHeaders as required.  Much improved.<br>\nAndroid, not so much.  Problems in plugin_dc CMakeLists, around line 25, OpenGL stuff.</p>\n<div class=\"codehilite\"><pre><span></span><code>CMake Warning at opencpn-libs/plugin_dc/CMakeLists.txt:39 (message):\n  Cannot locate a OpenGL stack\n</code></pre></div>",
        "id": 398300760,
        "sender_full_name": "Dave Register",
        "timestamp": 1698157718
    },
    {
        "content": "<p>I'm away for some time,  will have a look late today if possible, else tomorrow (in this strange time zone)</p>",
        "id": 398302101,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1698158110
    },
    {
        "content": "<p>OK, no problem.  All is stable in the Production side, so no panic.</p>",
        "id": 398302629,
        "sender_full_name": "Dave Register",
        "timestamp": 1698158265
    },
    {
        "content": "<p>I think I understand. The error message basically says that it does not find GLES2/gl2.h. </p>\n<p>In the shipdriver case we use a toolchain file. This sets up the environment so cmake searches in the  NDK sysroot.  This works.</p>\n<p>In TP, the setup is solely done by defining various constants to cmake  (circleci-build-android-*) . Nothing is done to mak  cmake look in the correct NDK locations. </p>\n<p>The fix would the be to use the shipdriver toolchain file instead. Or add the required stuff directly to circleci-build-android-*; the toolchain file should gives the the asnwer to what</p>",
        "id": 398305342,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1698159131
    },
    {
        "content": "<p>Bye for now...</p>",
        "id": 398305867,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1698159296
    },
    {
        "content": "<p>What's happening here is IMHO that opencpn-libs reveals a bug in current TP setup since it does not use the headers and libraries in the NDK sysroot although it should.</p>",
        "id": 398351461,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1698177171
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nYes, that is true.  My local builds succeed since it finds the host system GLES2.<br>\nFrankly, GLES2 is GLES2, so it would not matter on local builds.<br>\nBut on CCI, starting from bare metal, GLES2 must be findable somewhere.  And the NDK sysroot route is formally correct.</p>\n<p>In my feeble defense, I note that in NDK-19, where all this Android stuff started, the sysroot (including GLES2 and lots of other stuff) was plainly broken.  That is why we, for years, included a local copy (borrowed from standard system file) in the source tree.</p>\n<p>Time to fix that.  I'm on it.</p>",
        "id": 398360360,
        "sender_full_name": "Dave Register",
        "timestamp": 1698181428
    },
    {
        "content": "<p>Forgot to mention:<br>\nOlder CMake did not handle toolchain files very well at all.  Finding stuff (like gl2.h) in a cross platform toolchain-specified sysroot simply did not work.<br>\nHooray for progress....</p>",
        "id": 398362694,
        "sender_full_name": "Dave Register",
        "timestamp": 1698182643
    },
    {
        "content": "<p>It could have been a version problem. You need a very recent cmake to match a recent NDK. Shipdriver works around this by using the python wheel distributed by the cmake project.</p>",
        "id": 398363788,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1698183209
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nI am a little confused.  No surprise there.<br>\nI have shifted a TP plugin to use a CMake toolchain file, used python to load a recent cmake, and used the image NDK.  Pretty much just like shipdriver.<br>\nGood news is that it builds.<br>\nConfusion:  I know(?) that it is getting GLES2/gl2.h from the NDK.  But I look at the compiler invocation line in CCI, and I cannot see a \"-I\" parameter that points to anything like the NDK.  So how does it know where to get the proper (i.e. sysroot) headers?</p>",
        "id": 398387632,
        "sender_full_name": "Dave Register",
        "timestamp": 1698197587
    },
    {
        "content": "<p>So, I do a test build with \"-H\" option, and I see this in the output:</p>\n<div class=\"codehilite\"><pre><span></span><code>/opt/android/ndk/toolchains/llvm/prebuilt/linux-x86_64/bin/../sysroot/usr/include/GLES2/gl2.h\n</code></pre></div>\n\n<p>This GLES2/gl2.h is indeed coming from the NDK sysroot.<br>\nSo, how does he know to use the Android NDK sysroot?  I never commanded that, unless implicitly.<br>\nWho did that?</p>",
        "id": 398394519,
        "sender_full_name": "Dave Register",
        "timestamp": 1698200918
    },
    {
        "content": "<p>As I understand it is the CMAKE_ANDROID_NDK in the toolchain file which makes it work. </p>\n<p>There is very little documentation available how this works, the basic promise seems just to be that it does. I remember struggling quite a bit before I got this in place.</p>",
        "id": 398420743,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1698216094
    },
    {
        "content": "<p>That is, have you looked into the toolchain file?</p>",
        "id": 398437093,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1698222810
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nI copied your toolchain files verbatim.  Not studied CMake documention yet.</p>\n<p>MacOS builds are failing.  The usual problem:</p>\n<div class=\"codehilite\"><pre><span></span><code>fatal error: &#39;GL/gl.h&#39; file not found\n</code></pre></div>\n\n<p><a href=\"https://app.circleci.com/pipelines/github/bdbcat/statusbar_pi?branch=master\">https://app.circleci.com/pipelines/github/bdbcat/statusbar_pi?branch=master</a></p>",
        "id": 398498564,
        "sender_full_name": "Dave Register",
        "timestamp": 1698244276
    },
    {
        "content": "<p>The usual Mac problem IIRC. On MacOS, there is no GL subdirectory but an OpenGL one.  Handled for example in main OpenCPN by code like </p>\n<div class=\"codehilite\"><pre><span></span><code>...\n#elif defined(__WXOSX__)\n #include &lt;OpenGL/gl.h&gt;\n #include &lt;OpenGL/glu.h&gt;\n...\n</code></pre></div>",
        "id": 398499420,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1698244524
    },
    {
        "content": "<p>Sorry, my bad.  Had an extra \"Texfont.cpp\" in root source and root cmake list.  Not needed, since all this is now in plugin-dc.  All fine now.</p>\n<p>I read some on Android toolchains.  There is a prebuilt toolchain in the NDK now.  Google and CMake are discussing which is better, and we can expect changes coming from Google on ndk structure.  Lots of moving parts.<br>\nI guess for now we accept the \"basic promise\".<br>\nIt is a little disturbing (to me) that the compiler invocation line in the log is misleading.  But let it go...</p>",
        "id": 398504723,
        "sender_full_name": "Dave Register",
        "timestamp": 1698245998
    },
    {
        "content": "<p>tl;dr;<br>\nopencpn-libs \"main\" is fine now.  Thanks for the refactor.</p>",
        "id": 398505086,
        "sender_full_name": "Dave Register",
        "timestamp": 1698246072
    },
    {
        "content": "<p>What we now have is a littlle more picky than it used to be, insisting on using the correct headers rather than bundled copies in all cases besides the glu stuff. This will inevitabley cause some pain to plugins which just have been includiing <code>GL/gl.h</code>, but it should be for the better.</p>",
        "id": 398511942,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1698247837
    },
    {
        "content": "<p>IIRC, I did some tries earlier with the ndk built-in toolchain file without success. Finally settled for what we have now which no doubt is much simpler. Too simple?</p>",
        "id": 398513780,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1698248385
    },
    {
        "content": "<p>Who said that:<br>\n\"Make things as simple as possible, and no simpler\"<br>\nI think Einstein.</p>",
        "id": 398545737,
        "sender_full_name": "Dave Register",
        "timestamp": 1698260755
    },
    {
        "content": "<p>Note to /me if I look back: Using the cmake variant of toolchain file is what creates the need for an updated cmake. The ndk toolchain file seems to implement what cmake does internally from the ground, avoiding the need for a cmake version which is updated  to match the latest NDK.</p>",
        "id": 398657628,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1698315357
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nMakes sense.  We have all written some odd code to make some older version of CMake do some useful thing.</p>",
        "id": 398712886,
        "sender_full_name": "Dave Register",
        "timestamp": 1698333653
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"517002\">@Dave Register</span> <br>\nplugin_dc/.../pidc.cpp has block below around line 140. It generates a compilation  message which is gibberish to me.</p>\n<p>Obviously, this block is misplaced, it belongs to the start of the file. But besides that, do you understand the purpose? Is it just a convoluted way to display the fact that wxUSE_GRAPHICS_CONTEXT is set, or what?</p>\n<div class=\"codehilite\"><pre><span></span><code>#if wxUSE_GRAPHICS_CONTEXT\n#define VALUE_TO_STRING(x) #x\n#define VALUE(x) VALUE_TO_STRING(x)\n#define VAR_NAME_VALUE(var) #var &quot;=&quot; VALUE(var)\n#pragma message(VAR_NAME_VALUE(wxUSE_GRAPHICS_CONTEXT))\n#endif\n</code></pre></div>",
        "id": 399282675,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1698665492
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nDo you have a link to the compile message?  Or verbatim copy?</p>",
        "id": 399309790,
        "sender_full_name": "Dave Register",
        "timestamp": 1698675004
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\n\"Is it just a convoluted way to display the fact that wxUSE_GRAPHICS_CONTEXT is set, or what?'<br>\nYes.  Macros appear to be not used elsewhere.</p>",
        "id": 399310318,
        "sender_full_name": "Dave Register",
        "timestamp": 1698675169
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nNever mind.  I see the recent patches to \"devel\".  Looks fine to me, now.<br>\nI will add the patch to pidc.h as requested.</p>",
        "id": 399315658,
        "sender_full_name": "Dave Register",
        "timestamp": 1698676802
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nOK, I'm stumped.<br>\nJon's plugin , OCPN_Draw_pi, Android.<br>\nThe plugin builds OK.  I import to hardware Android, and get undefined symbol in the library.  Sort of a normal occurrence during debugging.</p>\n<p>What is missing is the CTOR for TexFont, which is part of new plugin_dc.  Probably others missing, as well, but the load stops after one error.<br>\nSo, I do ssh access to CI build bot, and look at the library.</p>\n<div class=\"codehilite\"><pre><span></span><code>circleci@42471cd028e6:~/project/build$ readelf -s libocpn_draw_pi.so  | grep TexFont\n  1066: 00000000     0 FUNC    GLOBAL DEFAULT  UND _ZN7TexFont12RenderString\n  1072: 00000000     0 FUNC    GLOBAL DEFAULT  UND _ZN7TexFontC1Ev\n  1075: 00000000     0 FUNC    GLOBAL DEFAULT  UND _ZN7TexFont13GetTextExten\n  1077: 00000000     0 FUNC    GLOBAL DEFAULT  UND _ZN7TexFontD1Ev\n  1082: 00000000     0 FUNC    GLOBAL DEFAULT  UND _ZN7TexFont5BuildER6wxFon\n 12422: 00000000     0 FUNC    GLOBAL DEFAULT  UND _ZN7TexFont12RenderString\n 12430: 00000000     0 FUNC    GLOBAL DEFAULT  UND _ZN7TexFontC1Ev\n 12433: 00000000     0 FUNC    GLOBAL DEFAULT  UND _ZN7TexFont13GetTextExten\n 12435: 00000000     0 FUNC    GLOBAL DEFAULT  UND _ZN7TexFontD1Ev\n 12440: 00000000     0 FUNC    GLOBAL DEFAULT  UND _ZN7TexFont5BuildER6wxFon\n</code></pre></div>\n\n<p>Sure enough, TexFont is undefined in the built plugin library.<br>\nLooking at the build log, I see TexFont.cpp is compiled, and added to the static ocpn::dc-utils library.  And this library is linked to the plugin.<br>\nSo, where has TexFont gone to?<br>\nI suspected some trouble with compiler \"visibility\" flag, so I fiddled with it.  No luck.  \"default\" or \"hidden\" makes no difference.</p>\n<p>Build log is here:<br>\n<a href=\"https://app.circleci.com/pipelines/github/bdbcat/ocpn_draw_pi/32/workflows/077acb7b-262a-4a43-a295-bb7aa9004e94/jobs/355\">https://app.circleci.com/pipelines/github/bdbcat/ocpn_draw_pi/32/workflows/077acb7b-262a-4a43-a295-bb7aa9004e94/jobs/355</a></p>\n<p>A mystery...</p>",
        "id": 400054265,
        "sender_full_name": "Dave Register",
        "timestamp": 1698980384
    },
    {
        "content": "<p>More:<br>\nLooking at the static lib with readelf gives:</p>\n<div class=\"codehilite\"><pre><span></span><code>circleci@42471cd028e6:~/project/build/opencpn-libs/plugin_dc/dc_utils$ readelf -s lib_DC_UTILS.a | grep TexFont\n</code></pre></div>\n\n<p>278: <a href=\"https://github.com/opencpn/OpenCPN/commit/00000000\">00000000</a>     0 NOTYPE  GLOBAL DEFAULT  UND _ZN7TexFont12RenderString<br>\n   279: <a href=\"https://github.com/opencpn/OpenCPN/commit/00000000\">00000000</a>     0 NOTYPE  GLOBAL DEFAULT  UND _ZN7TexFont13GetTextExten<br>\n   280: <a href=\"https://github.com/opencpn/OpenCPN/commit/00000000\">00000000</a>     0 NOTYPE  GLOBAL DEFAULT  UND _ZN7TexFont5BuildER6wxFon<br>\n   281: <a href=\"https://github.com/opencpn/OpenCPN/commit/00000000\">00000000</a>     0 NOTYPE  GLOBAL DEFAULT  UND _ZN7TexFontC1Ev<br>\n   282: <a href=\"https://github.com/opencpn/OpenCPN/commit/00000000\">00000000</a>     0 NOTYPE  GLOBAL DEFAULT  UND _ZN7TexFontD1Ev<br>\n    File: lib_DC_UTILS.a(TexFont.cpp.o)<br>\n     1: <a href=\"https://github.com/opencpn/OpenCPN/commit/00000000\">00000000</a>     0 FILE    LOCAL  DEFAULT  ABS TexFont.cpp<br>\n    82: <a href=\"https://github.com/opencpn/OpenCPN/commit/00001974\">00001974</a>   876 FUNC    GLOBAL DEFAULT    2 _ZN7TexFont11RenderGlyphE<br>\n    83: <a href=\"https://github.com/opencpn/OpenCPN/commit/00001ce0\">00001ce0</a>   184 FUNC    GLOBAL DEFAULT    2 _ZN7TexFont12RenderString<br>\n    84: <a href=\"https://github.com/opencpn/OpenCPN/commit/00001d98\">00001d98</a>   392 FUNC    GLOBAL DEFAULT    2 _ZN7TexFont12RenderString<br>\n    85: <a href=\"https://github.com/opencpn/OpenCPN/commit/00001784\">00001784</a>   192 FUNC    GLOBAL DEFAULT    2 _ZN7TexFont13GetTextExten<br>\n    86: <a href=\"https://github.com/opencpn/OpenCPN/commit/00001844\">00001844</a>   304 FUNC    GLOBAL DEFAULT    2 _ZN7TexFont13GetTextExten<br>\n    87: <a href=\"https://github.com/opencpn/OpenCPN/commit/0000021c\">0000021c</a>  5480 FUNC    GLOBAL DEFAULT    2 _ZN7TexFont5BuildER6wxFon<br>\n    88: <a href=\"https://github.com/opencpn/OpenCPN/commit/000001e0\">000001e0</a>    60 FUNC    GLOBAL DEFAULT    2 _ZN7TexFont6DeleteEv<br>\n    89: <a href=\"https://github.com/opencpn/OpenCPN/commit/00000000\">00000000</a>   348 FUNC    GLOBAL DEFAULT    2 _ZN7TexFontC1Ev<br>\n    90: <a href=\"https://github.com/opencpn/OpenCPN/commit/00000000\">00000000</a>   348 FUNC    GLOBAL DEFAULT    2 _ZN7TexFontC2Ev<br>\n    91: <a href=\"https://github.com/opencpn/OpenCPN/commit/0000015c\">0000015c</a>   132 FUNC    GLOBAL DEFAULT    2 _ZN7TexFontD1Ev<br>\n    92: <a href=\"https://github.com/opencpn/OpenCPN/commit/0000015c\">0000015c</a>   132 FUNC    GLOBAL DEFAULT    2 _ZN7TexFontD2Ev</p>\n<p>Not sure how to interpret this.  TexFont is in the included file list, but then undefined in the linked static archive.<br>\nHmmm.....</p>",
        "id": 400054980,
        "sender_full_name": "Dave Register",
        "timestamp": 1698980677
    },
    {
        "content": "<p>And more:<br>\nOther classes in the DC_UTILS library (e.g. piDC) are found correctly.</p>",
        "id": 400055558,
        "sender_full_name": "Dave Register",
        "timestamp": 1698981002
    },
    {
        "content": "<p>hm...</p>\n<p>My first thought is that it could be about linkage order. That is, that when the linker loaded dc_plugin nothing \"needed\" the symbols we are talking about and they were thus ignored.</p>\n<p>In normal use cases this leads to linkage errors due to to undefined symbols, but unfortunately we accept  these in Linux builds. OTOH, we don't accept them when building for Android and Windows since we link those to main OpenCPN one way or another. So the question is then: does this build on Windows and Android?</p>",
        "id": 400067552,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1698989414
    },
    {
        "content": "<p>No. First of all, your link was a successful Android build. Sorry, just thinking aloud.</p>\n<p>Checked  the linkage order. It's perfectly sane, loading the dc_utils library at the very end. Back to the library internals.</p>\n<p>Repeating your readelf adding a -C (demangle) option on a local shipdriver android build. Here all looks defined and hidden besides the CTOR/DTOR. Same for a local Fedora build.</p>\n<div class=\"codehilite\"><pre><span></span><code>     1: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS TexFont.cpp\n   486: 0000000000001090  1440 FUNC    GLOBAL HIDDEN     2 TexFont::RenderG[...]\n   487: 00000000000017a4   412 FUNC    GLOBAL HIDDEN     2 TexFont::RenderS[...]\n   488: 0000000000001940   148 FUNC    GLOBAL HIDDEN     2 TexFont::RenderS[...]\n   489: 0000000000000ddc   544 FUNC    GLOBAL HIDDEN     2 TexFont::GetText[...]\n   490: 0000000000000ffc   148 FUNC    GLOBAL HIDDEN     2 TexFont::GetText[...]\n   491: 00000000000001e0  3068 FUNC    GLOBAL HIDDEN     2 TexFont::Build(w[...]\n   492: 0000000000000180    96 FUNC    GLOBAL HIDDEN     2 TexFont::Delete()\n   493: 0000000000000000   264 FUNC    GLOBAL HIDDEN     2 TexFont::TexFont()\n   494: 0000000000000000   264 FUNC    GLOBAL HIDDEN     2 TexFont::TexFont()\n   495: 0000000000000108   120 FUNC    GLOBAL HIDDEN     2 TexFont::~TexFont()\n   496: 0000000000000108   120 FUNC    GLOBAL HIDDEN     2 TexFont::~TexFont()\n</code></pre></div>\n<p>Now, turning to my CCI shipdriver build. Here, the tooling to use obviously is NDK . Trying with readelf, objdump and nm. The latter gives below. It looks like everything is fine, besides the CTOR/DTOR.  </p>\n<p>The values are 0, presuming this is because it's relocatable using -fPIE.</p>\n<p>In the end, it seems to be about the CTOR/DTOR. Everything else is fine. </p>\n<div class=\"codehilite\"><pre><span></span><code> /opt/android/ndk/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-nm  -C lib_DC_UTILS.a  | grep TexFont::\n         U TexFont::RenderString(wxString const&amp;, int, int)\n         U TexFont::GetTextExtent(wxString const&amp;, int*, int*)\n         U TexFont::Build(wxFont&amp;, bool)\n00000000 W TexFont::SetColor(wxColour&amp;)\n         U TexFont::TexFont()\n         U TexFont::~TexFont()\n00000000 T TexFont::RenderGlyph(int)\n00000000 T TexFont::RenderString(char const*, int, int)\n00000000 T TexFont::RenderString(wxString const&amp;, int, int)\n00000000 T TexFont::GetTextExtent(char const*, int*, int*)\n00000000 T TexFont::GetTextExtent(wxString const&amp;, int*, int*)\n00000000 T TexFont::Build(wxFont&amp;, bool)\n00000000 T TexFont::Delete()\n00000000 T TexFont::TexFont()\n00000000 T TexFont::TexFont()\n00000000 T TexFont::~TexFont()\n00000000 T TexFont::~TexFont()\n</code></pre></div>\n<p>Looking at pidc I can see that the DTOR/CTOR are well defined here (excerpt):</p>\n<div class=\"codehilite\"><pre><span></span><code>$ /opt/android/ndk/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-nm -C lib_DC_UTILS.a  | grep piDC::\n...\n00000000 T piDC::piDC(wxGLCanvas&amp;)\n00000000 T piDC::piDC(wxDC&amp;)\n00000000 T piDC::piDC()\n00000000 T piDC::piDC(wxGLCanvas&amp;)\n00000000 T piDC::piDC(wxDC&amp;)\n00000000 T piDC::piDC()\n00000000 T piDC::~piDC()\n00000000 T piDC::~piDC()\n...\n</code></pre></div>\n<p>So this is about TexFont only, and specifically the CTOR/DTOR. Any ideas?</p>",
        "id": 400074866,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1698994277
    },
    {
        "content": "<p>The plot thickens. There are two TexFont::TexFont symbols, one undefined and one defined (piDC not so, only defined). </p>\n<div class=\"codehilite\"><pre><span></span><code>/opt/android/ndk/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-nm -C lib_DC_UTILS.a  | grep TexFont::TexFont\n         U TexFont::TexFont()\n00000000 T TexFont::TexFont()\n00000000 T TexFont::TexFont()\n</code></pre></div>",
        "id": 400075497,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1698994656
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nIdea:<br>\nThere is a TexFont defined in \"<a href=\"http://libgorp.so\">libgorp.so</a>\", the native OCPN base code.  Some strange collision?<br>\nI will experiment.</p>",
        "id": 400145449,
        "sender_full_name": "Dave Register",
        "timestamp": 1699021962
    },
    {
        "content": "<p>Seems like you are on the right track. I looked around for another TexFont.cpp, but obviously didn't look good enough.</p>",
        "id": 400148866,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1699023102
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nI renamed TexFont to TexFontPi (in devel branch).<br>\nProblem solved.<br>\nImport plugin on real Android device, loads and runs fine.<br>\nTo confirm, investigated plugin on CCI:</p>\n<div class=\"codehilite\"><pre><span></span><code>circleci@2715700db4b9:~/project/build$ readelf -s libocpn_draw_pi.so | grep TexFont\n  1133: 00203fc8  5480 FUNC    GLOBAL DEFAULT   13 _ZN9TexFontPI5BuildER6wxF\n  1263: 00205a8c   184 FUNC    GLOBAL DEFAULT   13 _ZN9TexFontPI12RenderStri\n  1326: 00205530   192 FUNC    GLOBAL DEFAULT   13 _ZN9TexFontPI13GetTextExt\n  1809: 00203f8c    60 FUNC    GLOBAL DEFAULT   13 _ZN9TexFontPI6DeleteEv\n  2187: 00203dac   348 FUNC    GLOBAL DEFAULT   13 _ZN9TexFontPIC2Ev\n  2411: 00203f08   132 FUNC    GLOBAL DEFAULT   13 _ZN9TexFontPID2Ev\n  2696: 00205720   876 FUNC    GLOBAL DEFAULT   13 _ZN9TexFontPI11RenderGlyp\n  2940: 00205b44   392 FUNC    GLOBAL DEFAULT   13 _ZN9TexFontPI12RenderStri\n  3336: 00203dac   348 FUNC    GLOBAL DEFAULT   13 _ZN9TexFontPIC1Ev\n  3564: 00203f08   132 FUNC    GLOBAL DEFAULT   13 _ZN9TexFontPID1Ev\n  3630: 002055f0   304 FUNC    GLOBAL DEFAULT   13 _ZN9TexFontPI13GetTextExt\n</code></pre></div>\n\n<p>I have no explanation.<br>\nThanks for the support and sounding board.</p>",
        "id": 400152238,
        "sender_full_name": "Dave Register",
        "timestamp": 1699024179
    },
    {
        "content": "<p>I did change visibility to \"default\" in the Android build of dc-utils:</p>\n<div class=\"codehilite\"><pre><span></span><code>if (CMAKE_CXX_COMPILER_ID MATCHES &quot;Clang|GNU&quot;)\n  set_property(TARGET _DC_UTILS PROPERTY COMPILE_FLAGS &quot;-fvisibility=default&quot;)\nendif ()\n</code></pre></div>\n\n<p>Should this actually be changed back to \"hidden\"?  I am a little foggy on this point.</p>",
        "id": 400152793,
        "sender_full_name": "Dave Register",
        "timestamp": 1699024349
    },
    {
        "content": "<p>So am I, for sure.  Need to read up on this. </p>\n<p>For plugins: should anything link to the plugin besides the dlload runtime linkage? No.  So nothing should really be visible  to others, we don't want plugins to link to each other.</p>",
        "id": 400154013,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1699024730
    },
    {
        "content": "<blockquote>\n<p>I have no explanation.</p>\n</blockquote>\n<p>Well, having two instances of a given class i. e., two libraries exporting different definitions of the same symbols is certainly a bug.</p>",
        "id": 400154798,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1699024967
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nI'll change back to \"hidden\", and verify</p>",
        "id": 400154852,
        "sender_full_name": "Dave Register",
        "timestamp": 1699024985
    },
    {
        "content": "<p>If the linkage fails, the best path would be to add a <code> __attribute__ ((visibility (\"default\"))</code> to the symbols (methods) which actually should be visible rather exporting each and every symbol. </p>\n<p>But then again: what links to a plugin? And why?</p>",
        "id": 400155540,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1699025186
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nNo change after revert to \"hidden\".  Works fine.<br>\nI'm content to move on, but will appreciate learning more.</p>",
        "id": 400158340,
        "sender_full_name": "Dave Register",
        "timestamp": 1699025993
    },
    {
        "content": "<p>Well, if you should learn it's certainly not from me... Anyway, I will check what's in devel with the goal to have them in master Real Soon (tm).</p>",
        "id": 400158960,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1699026186
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nPlease hold off on merging devel-&gt;main.<br>\nWorking another Android DC issue.<br>\nHopefully tonight.</p>",
        "id": 400159368,
        "sender_full_name": "Dave Register",
        "timestamp": 1699026300
    },
    {
        "content": "<p>I'm not talking about merging the whole branch, just to cherry-pick these specific commits. After all it is a blocking error, plugin_dc is already in main.</p>",
        "id": 400159798,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1699026415
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nOK.  I guess it would block shipdriver, etc. on Android.<br>\nI am working closely with Jon to stabilize FE2, so not really blocking for production there.  There are other issues...<br>\nJust heads up.  There will be more changes coming, I expect.</p>",
        "id": 400160396,
        "sender_full_name": "Dave Register",
        "timestamp": 1699026602
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nI have made more small changes to \"devel\", ready to cherry-pick to \"main\", if you please.<br>\nSorry for the multiple small commits.  Debugging, you know...<br>\nFiles changed:</p>\n<div class=\"codehilite\"><pre><span></span><code>opencpn-libs/plugin_dc/dc_utils/src/pidc.cpp\nopencpn-libs/plugin_dc/dc_utils/src/pi_shaders.cpp\n</code></pre></div>\n\n<p>This should be the last (immediate) change we need for production switch-over of all FE2 plugins to opencpn-libs structure.<br>\nI will be glad to see that.</p>",
        "id": 400305910,
        "sender_full_name": "Dave Register",
        "timestamp": 1699110432
    },
    {
        "content": "<p>You can do that switch now, devel is stable. Just use that.</p>\n<p>Could you provide a reasonable commit description, maybe a few lines, for what this is all about?</p>",
        "id": 400306177,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1699110670
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> </p>\n<p>\"Improve Android GLES2 rendering of pattern filled areas, to support pattern color definition.<br>\nStandard GL rendering of textured patterns is straightforward.  GLES2 on Android requires a specific shader to preform this operation.<br>\nThis commit corrects an error in that shader source code.\"</p>\n<p>I guess we could use HEAD of devel now.  But I'd feel better using \"main\", as a signal to new devs that this library is stable and fully functional on all platforms.  No particular hurry here. Rather get it right.</p>",
        "id": 400308727,
        "sender_full_name": "Dave Register",
        "timestamp": 1699112677
    },
    {
        "content": "<p>anyway, master is pushed and identical to current devel</p>",
        "id": 400312132,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1699115478
    },
    {
        "content": "<p>Thanks</p>",
        "id": 400315518,
        "sender_full_name": "Dave Register",
        "timestamp": 1699118994
    },
    {
        "content": "<p>In <em>opencpn-libs/plugin_dc</em> we have <em>CMakeLists.txt</em> with <code>project(\"plugin-dc\")</code>.</p>\n<p>Using this in <em>Plugin.cmake</em> we write:</p>\n<div class=\"codehilite\"><pre><span></span><code>add_subdirectory(&quot;${CMAKE_SOURCE_DIR}/opencpn-libs/plugin_dc&quot;)\n  target_link_libraries(${PACKAGE_NAME} ocpn::plugin-dc)\n</code></pre></div>\n<p>Could the <em>opencpn-libs</em> folder be renamed to <em>opencpn-libs/plugin-dc</em> or <em>CMakeLists.txt</em> be adjusted?</p>",
        "id": 404434183,
        "sender_full_name": "Mike Rossiter",
        "timestamp": 1701098453
    },
    {
        "content": "<p>We could sure do that. However, besides you this also mean coordinating with Dave and Jon which also uses the library. Is it worth it?</p>\n<p>Personally, I dont find it strange. Using '_' is  preferred for filenames,  set in stone by the Google GL..<br>\nAnd using '-' in identifiers like these which is not C code is actually very common, I might even say 'preferred'. No sources for the latter. though.</p>",
        "id": 404566223,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1701158163
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> I can live with it. Just thinking about others having to adapt their code.</p>",
        "id": 404571736,
        "sender_full_name": "Mike Rossiter",
        "timestamp": 1701160503
    },
    {
        "content": "<p>Let's go with it as it is then.  The cost of change is just too high compared to possible (questionable?) gains.</p>",
        "id": 404572012,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1701160624
    }
]