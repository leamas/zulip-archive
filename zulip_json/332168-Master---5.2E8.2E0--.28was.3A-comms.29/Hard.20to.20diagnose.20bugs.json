[
    {
        "content": "<p><strong>Public</strong> stream created by <span class=\"user-mention silent\" data-user-id=\"522729\">Dan Dickey</span>. <strong>Description:</strong></p>\n<blockquote>\n<p>Discuss noticed bugs that are hard to diagnose</p>\n</blockquote>",
        "id": 307085754,
        "sender_full_name": "Notification Bot",
        "timestamp": 1667217021
    },
    {
        "content": "<p>I have been running latest master branch on Windows and some Linux variants.  On Windows only I have seen a couple of troubling crashes.  Here is one example:</p>\n<p>in pluginmanager.cpp there is this code snippet:</p>\n<p>Bind(EVT_PLUGMGR_AIS_MSG,  <a href=\"http://wxCommandEvent&amp;%20ev\">&amp;</a> {<br>\n    auto pTarget = static_cast&lt;AisTargetData*&gt;(ev.GetClientData());<br>\n    SendAisJsonMessage(pTarget); });</p>\n<p>In the observed case, the pointer created from the event client data points to uninitialized memory.  The call to send the message to the plugins crashes O because the data within the structure is gibberish.  It's really hard to figure out how this happened because the pointer comes to this place via the event queue, so there isn't a good way to know when the pointer was created or why the structure was not initialized after creation.</p>",
        "id": 307086756,
        "sender_full_name": "Dan Dickey",
        "timestamp": 1667217364
    },
    {
        "content": "<p>Dan..<br>\nIs this reproducible?  Or random?</p>",
        "id": 307122374,
        "sender_full_name": "Dave Register",
        "timestamp": 1667226618
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"522729\">@Dan Dickey</span>  Debugging that thing... looking for  EVT_PLUGMGR_AIS_MSG you will find:</p>\n<div class=\"codehilite\"><pre><span></span><code>evt_ais_json_listener.Listen(g_pAIS-&gt;plugin_msg, this,\n                               EVT_PLUGMGR_AIS_MSG);\n</code></pre></div>\n<p>That is, the EVT_PLUGMGR_AIS_MSG is generated when something is invoking <code>Notify()</code> on <code>g_pAIS-&gt;plugin_msg</code>.   Looking for that I see</p>\n<div class=\"codehilite\"><pre><span></span><code>$ git grep plugin_msg ../..\n../../include/ais_decoder.h:  EventVar plugin_msg;\n../../src/ais_decoder.cpp:      plugin_msg.Notify(pTargetData);\n../../src/ais_decoder.cpp:        plugin_msg.Notify(td);\n../../src/ais_decoder.cpp:          plugin_msg.Notify(td);\n../../src/ais_decoder.cpp:          plugin_msg.Notify(td);\n</code></pre></div>\n<p>If the pointer in the event is indeed garbage it should mean that the pointer used as argument to <code>plugin_msg.Notify()</code> is broken.  HTH</p>",
        "id": 307218758,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1667257418
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"352497\" href=\"/#narrow/stream/352497-Hard-to-diagnose-bugs/topic/stream.20events\">#Hard to diagnose bugs &gt; stream events</a> by <span class=\"user-mention silent\" data-user-id=\"399510\">Alec Leamas</span>.</p>",
        "id": 307219004,
        "sender_full_name": "Notification Bot",
        "timestamp": 1667257546
    },
    {
        "content": "<p>Quick look into AisDecoder... is this about AisDecoder::OnTimerAIS ? Someone needs to check that we do not send a pointer td to Notify() and later deletes that pointer in the same function.  If so, it will be deleted when the message is processed, it happens later...</p>\n<p>EDIT: That is a  220 lines function, no wonder if we lose track on things here...</p>",
        "id": 307221149,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1667258699
    },
    {
        "content": "<p>It's not easily reproduced.  But I think it is a bug. </p>\n<p>This code will delete the pointer td even though it may have just posted an event using it:</p>\n<div class=\"codehilite\"><pre><span></span><code>  for (unsigned int i = 0; i &lt; remove_array.size(); i++) {\n    auto itd = current_targets.find(remove_array[i]);\n    if (itd != current_targets.end()) {\n      AisTargetData *td = itd-&gt;second;\n      current_targets.erase(itd);\n      delete td;  &lt;&lt;&lt;&lt;&lt;&lt;&lt; we just posted this to an event handler\n    }\n  }\n</code></pre></div>\n<p>One solution is to let the event handler delete the pointer.  It can know if it should be deleted by the member <code>td-&gt;b_removed == true;</code></p>",
        "id": 307268141,
        "sender_full_name": "Dan Dickey",
        "timestamp": 1667292317
    },
    {
        "content": "<p>See what you think of this patch:</p>\n<div class=\"codehilite\"><pre><span></span><code>diff --git a/src/ais_decoder.cpp b/src/ais_decoder.cpp\nindex b19467f91..b4e37a670 100644\n--- a/src/ais_decoder.cpp\n+++ b/src/ais_decoder.cpp\n@@ -3710,7 +3710,7 @@ void AisDecoder::OnTimerAIS(wxTimerEvent &amp;event) {\n     for (unsigned int i = 0; i &lt; g_MMSI_Props_Array.GetCount(); i++) {\n       MmsiProperties *props = g_MMSI_Props_Array[i];\n       if (td-&gt;MMSI == props-&gt;MMSI) {\n-        if (props-&gt;m_bignore) {\n+        if (props-&gt;m_bignore &amp;&amp; !td-&gt;b_removed) {\n           remove_array.push_back(td-&gt;MMSI);  // Add this target to removal list\n           td-&gt;b_removed = true;\n           plugin_msg.Notify(td);\n@@ -3726,9 +3726,7 @@ void AisDecoder::OnTimerAIS(wxTimerEvent &amp;event) {\n   for (unsigned int i = 0; i &lt; remove_array.size(); i++) {\n     auto itd = current_targets.find(remove_array[i]);\n     if (itd != current_targets.end()) {\n-      AisTargetData *td = itd-&gt;second;\n       current_targets.erase(itd);\n-      delete td;\n     }\n   }\n\ndiff --git a/src/pluginmanager.cpp b/src/pluginmanager.cpp\nindex 416851b0e..a5aad7430 100644\n--- a/src/pluginmanager.cpp\n+++ b/src/pluginmanager.cpp\n@@ -1274,7 +1274,9 @@ void PlugInManager::HandlePluginLoaderEvents() {\n                                     EVT_PLUGMGR_ROUTEMAN_MSG);\n   Bind(EVT_PLUGMGR_AIS_MSG,  [&amp;](wxCommandEvent&amp; ev) {\n     auto pTarget = static_cast&lt;AisTargetData*&gt;(ev.GetClientData());\n-    SendAisJsonMessage(pTarget); });\n+    SendAisJsonMessage(pTarget);\n+    if (pTarget-&gt;b_removed) delete pTarget;\n+  });\n   Bind(EVT_PLUGMGR_ROUTEMAN_MSG,  [&amp;](ObservedEvt&amp; ev) {\n     auto msg = UnpackEvtPointer&lt;wxJSONValue&gt;(ev);\n     SendJSONMessageToAllPlugins(ev.GetString(), *msg); });\n</code></pre></div>",
        "id": 307273608,
        "sender_full_name": "Dan Dickey",
        "timestamp": 1667294792
    },
    {
        "content": "<p>That was the same thing I saw at a glance which I thought would need a check. Seems that we agree that this is a bug.</p>\n<p>Letting the event handler do the delete is scary. When we post a message we are basically broadcasting it, and if something else listens to the same EventVar we lose. We should hence basically treat resources passed through the  observable machinery as read-only.</p>\n<p>IMHO, this happens because we are using raw pointers --  using them is basically a bug. A cleaner solution would be to use a shared_ptr. The event system  allows for passing such pointers, and that creates the shared ownership we have here. But that requires that the pointer is pointing to an object with a proper destructor.</p>\n<p>We need <span class=\"user-mention\" data-user-id=\"517002\">@Dave Register</span> in the loop here as well.</p>",
        "id": 307274267,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1667295120
    },
    {
        "content": "<p>I agree that TargetData pointer should be passed as a shared_ptr.  This is essentially required for all data object pointers used in our new \"observable\" event management.<br>\nPatch to implement this would be very welcome.</p>",
        "id": 307319016,
        "sender_full_name": "Dave Register",
        "timestamp": 1667311643
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"522729\">@Dan Dickey</span> Do you want to make such a patch?</p>",
        "id": 307343220,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1667318010
    },
    {
        "content": "<p>Yes, I will work it out.  Been a bit busy but will post a solution this week.</p>",
        "id": 307437170,
        "sender_full_name": "Dan Dickey",
        "timestamp": 1667353663
    },
    {
        "content": "<p>OK. I just wanted to make sure it wasn't on my desk.</p>",
        "id": 307493093,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1667385273
    },
    {
        "content": "<p>PR <a href=\"https://github.com/OpenCPN/OpenCPN/pull/2802\">https://github.com/OpenCPN/OpenCPN/pull/2802</a> submitted.  Waiting for CI builds to finish.</p>",
        "id": 307507719,
        "sender_full_name": "Dan Dickey",
        "timestamp": 1667390756
    },
    {
        "content": "<p>hm.. will this work?</p>\n<p>There is still a raw pointer a . k.  a.   pTargetData. The shared_ptr points to the same memory, memory which is deleted later on.</p>\n<p>As I understand it, the way  to fix this properly is to go back to  AisTargetDataMaker::Create and let it return a shared_ptr instead of a raw. That  would lead to some serious work, but the compiler should be able to handle it properly. </p>\n<p>Don't get me wrong, I really wish there is a better alternative...</p>",
        "id": 307525464,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1667396610
    },
    {
        "content": "<p>Perhaps one could add a new function CreateShared instead, to be used at least here?</p>",
        "id": 307525758,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1667396698
    },
    {
        "content": "<p>I think the pointer passed to the notify function uses a copy of the shared pointer which increases the use count.  So only when the use count drops to zero does the memory actually get freed.  Isn't that how these work?</p>",
        "id": 307528894,
        "sender_full_name": "Dan Dickey",
        "timestamp": 1667397508
    },
    {
        "content": "<p>Yes. But as I understand this mechanism will fail if the same memory is deleted using the raw pointer. The shared_ptr needs to the only one handling the memory.</p>\n<p>Or, am I missing simething?</p>",
        "id": 307529514,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1667397646
    },
    {
        "content": "<p>Ok, I'll look at it tonight.  I think there is a simple fix.</p>",
        "id": 307531964,
        "sender_full_name": "Dan Dickey",
        "timestamp": 1667398180
    },
    {
        "content": "<p>My suggestion for simple fix:</p>\n<div class=\"codehilite\"><pre><span></span><code>diff --git a/src/ais_decoder.cpp b/src/ais_decoder.cpp\nindex 0b059893b..1b0e6b4b0 100644\n--- a/src/ais_decoder.cpp\n+++ b/src/ais_decoder.cpp\n@@ -3620,7 +3620,7 @@ void AisDecoder::OnTimerAIS(wxTimerEvent &amp;event) {\n       current_targets.erase(it);\n       break;  // leave the loop\n     }\n-    std::shared_ptr&lt;AisTargetData&gt; td(std::make_shared&lt;AisTargetData&gt;(*it-&gt;second));\n+    auto td = std::make_shared&lt;AisTargetData&gt;(*it-&gt;second.Clone());\n\n     int target_posn_age = now.GetTicks() - td-&gt;PositionReportTicks;\n     int target_static_age = now.GetTicks() - td-&gt;StaticReportTicks;\n</code></pre></div>\n<p>and then implement AisTargetData::Clone as a deep copy. That would make td an independent copy, not affected by the delete on the raw pointer later on. </p>\n<p>Implementing Clone() would require a lot of writing, but should otherwise be trivial.</p>",
        "id": 307572783,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1667408433
    },
    {
        "content": "<p>What about a simpler fix.  The notification function translates the AIS object into a JSON object using a subset of the AIS object fields.  Why not create that JSON object first then send the pointer to that?  Then we have no need to deep clone the AIS object. A second benefit, it is always ok for the notification function to delete the JSON object pointer when it is finished because the sending function has no other use for it.</p>",
        "id": 307694597,
        "sender_full_name": "Dan Dickey",
        "timestamp": 1667470965
    },
    {
        "content": "<p>Om Phone my ISP has some major problem</p>\n<p>One could argue that encoding and decoding JSON Is quite complicated.</p>\n<p>That said I think it's possible, the logic is basically the same as behind Clone (). However, it must still be handled by a shared_ptt since we don't know how many listeners there are.</p>\n<p>A variant could be to create a new type, a subset of AisTargetData and use that instead of the (complicated) JSON object. That also brings some compiler checks.</p>\n<p>A perhaps better variant: make AisTarget Data be a descendant of say BaseAisTargetData, move the things we need into the base class and implement Clone on that instead...</p>",
        "id": 307721790,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1667480074
    },
    {
        "content": "<p>Made a test shot.Perhaps a Clone isn't that complicated. The compiler can make a shallow copy using <em>clone=</em>this, and then it's \"just\" to fix the items which are \"deep\" so to speak</p>",
        "id": 307723856,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1667480713
    },
    {
        "content": "<p>Sorry for mangled stars, clone = this. I think you get it anyway ..</p>",
        "id": 307724293,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1667480833
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span>  have a look at <a href=\"https://github.com/OpenCPN/OpenCPN/pull/2804\">https://github.com/OpenCPN/OpenCPN/pull/2804</a>.  I tested this for 24 hours and it did not leak or crash.  I think it solves the issue.  If you have any suggestions let me know.</p>",
        "id": 307869865,
        "sender_full_name": "Dan Dickey",
        "timestamp": 1667526008
    }
]