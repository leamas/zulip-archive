[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> :<br>\nHave unpublished this website<br>\n<a href=\"https://opencpn-manuals.github.io/plugins/index.html\">https://opencpn-manuals.github.io/plugins/index.html</a><br>\nIn case of broken links shall I add a post to the Cruisers Forum?</p>",
        "id": 323220624,
        "sender_full_name": "Mike Rossiter",
        "timestamp": 1674558177
    },
    {
        "content": "<p>perhaps. We should perhaps also consider re-publish with a single static page containing the correct link. </p>\n<p>The best solution would be to generate a  HTML 301 Moved message. Don't know if it is possible and, more important, worth the effort to find out,</p>",
        "id": 323251657,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1674567113
    },
    {
        "content": "<blockquote>\n<p>Don't know if it is possible and, more important, worth the effort to find out,</p>\n</blockquote>\n<p>Low priority imo. To avoid stale links in users browser cache I will post on the Forum.</p>",
        "id": 323260080,
        "sender_full_name": "Mike Rossiter",
        "timestamp": 1674569278
    },
    {
        "content": "<p>Had grief over validating .xml for plugin build.  Turns out it was because of the move of the manuals from <br>\n<code>https://opencpn-manuals.github.io/plugins/</code><br>\nto<br>\n<code>https://opencpn.org/OpenCPN/plugins/</code><br>\nI have had my old manual page removed to avoid the possibility of the wrong one being referenced or updated.<br>\nThe url is in the plugin metadata and validated during ci builds.<br>\nIt is also in other places, in my case, such as the plugin help. </p>\n<p>Easily fixed, but all plugins need to be rebuilt to update this.<br>\nIf they are move again,  http redirects would save a lot of hassle.</p>",
        "id": 324946240,
        "sender_full_name": "Tony Voss",
        "timestamp": 1675179863
    },
    {
        "content": "<blockquote>\n<p>If they are move again, http redirects would save a lot of hassle.</p>\n</blockquote>\n<p>Indeed. I don't see this happening if the foreseeable future, but I don't see that far. Also unsure how to generate a redirect response in the antora environment, should at least try to google it.</p>",
        "id": 324998093,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1675193351
    },
    {
        "content": "<p>I have moved the opencpn core part of the Programmer Manual to the main opencpn project, close to the devs for this part.  It is organized the same way as the plugins in a manual/ directory.</p>",
        "id": 325740136,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1675465514
    },
    {
        "content": "<p>On this page <code>https://opencpn.org/OpenCPN/info/manuals.html</code> the link for Developer Manual is broken.  It points to <code>https://opencpn-manuals.github.io/main/ocpn-dev-manual/intro-AboutThisManual.html</code></p>",
        "id": 325743255,
        "sender_full_name": "Tony Voss",
        "timestamp": 1675467352
    },
    {
        "content": "<p>I will tell Kathi about this one. Link should be:<br>\n<a href=\"https://opencpn-manuals.github.io/main/ocpn-dev-manual/0.1/intro-AboutThisManual.html\">https://opencpn-manuals.github.io/main/ocpn-dev-manual/0.1/intro-AboutThisManual.html</a></p>",
        "id": 325807282,
        "sender_full_name": "Mike Rossiter",
        "timestamp": 1675509437
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399559\">@Mike Rossiter</span> : Perhaps we should just point to  <a href=\"https://opencpn-manuals.github.io/main\">https://opencpn-manuals.github.io/main</a>. This is a more stable link, and the developer manual is just one click away...</p>",
        "id": 325854593,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1675528523
    },
    {
        "content": "<p>Sorry Alec. Email already sent. Don't want to give Kathi more work at this point.</p>",
        "id": 325862752,
        "sender_full_name": "Mike Rossiter",
        "timestamp": 1675532280
    },
    {
        "content": "<p>Fair enough, np</p>",
        "id": 325878098,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1675541976
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399559\">@Mike Rossiter</span>  <span class=\"user-mention\" data-user-id=\"399865\">@Rick Gleason</span> </p>\n<p>I have updated opencpn-manuals with a manual hook  to rebuild the manual. The short story is that  a commit  is no longer required to trigger a build, building can be done directly in the github web interface.  Look in  opencpn-manuals/main/INSTALL:md , the new chapter <em>Rebuild manual without push</em>.</p>",
        "id": 397781001,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1697839225
    },
    {
        "content": "<p><a href=\"#narrow/stream/332172-manuals/topic/ocpn-manuals/near/397781001\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"332172\" href=\"/#narrow/stream/332172-manuals/topic/New.20Message.20Plugin.20API\">#manuals &gt; New Message Plugin API</a> by <span class=\"user-mention silent\" data-user-id=\"399510\">Alec Leamas</span>.</p>",
        "id": 397781059,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697839254
    },
    {
        "content": "<p><a href=\"https://github.com/opencpn-manuals/main/blob/main/INSTALL.md\">https://github.com/opencpn-manuals/main/blob/main/INSTALL.md</a></p>",
        "id": 397789654,
        "sender_full_name": "Rick Gleason",
        "timestamp": 1697845961
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399510\">@Alec Leamas</span> <br>\nI looked at the Dashboard manual (..OpenCPN\\plugins\\dashboard_pi\\manual\\modules\\ROOT\\pages) using Firefox. No pictures visible.<br>\nI see the  ref code <strong>:imagesdir: ../images/</strong> is missing at index.adoc. Adding that it works.<br>\nI also see it's the same for other manual pages. Is that international for a  reason I don't know or just missed?<br>\nIf it helps I could walk through all .adoc pages and PR?</p>",
        "id": 435724213,
        "sender_full_name": "HÃ¥kan Svensson",
        "timestamp": 1714201763
    },
    {
        "content": "<p>Hm... This is just about local browsing.  How this works depends on your browser and possible plugins.</p>\n<p>A better way is actually to build the complete manual locally. After the first somewhat painful run this is actually fast, and gives a html structure which is the same as what's published later. This certainly includes the  images.</p>\n<p>So, I suggest that you first look into  <a href=\"https://github.com/opencpn-manuals/main/blob/main/INSTALL.md#local-builds\">https://github.com/opencpn-manuals/main/blob/main/INSTALL.md#local-builds</a>.  Note that you need to build the complete manual to get also the plugins part. It's not that complicated.</p>",
        "id": 435744834,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1714214066
    },
    {
        "content": "<p>Ah... forgot one important thing. Most plugins have a <em>site.yml</em> file in their manual/ directory. For these, you can just run <code>antora site.yml</code> and build only the plugin. This is real fast. </p>\n<p>If <em>site.yml</em> is  missing I can help you to craft one, it's easy.</p>",
        "id": 435745235,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1714214488
    },
    {
        "content": "<p>Chartdldr indeed have a <em>site.yml</em>:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ time antora site.yml\nSite generation complete!\nOpen file:///home/mk/src/OpenCPN/plugins/chartdldr_pi/manual/docs/index.html in a browser to view your site.\n\nreal    0m0.782s\nuser    0m0.964s\nsys 0m0.232s\n</code></pre></div>",
        "id": 435745476,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1714214735
    },
    {
        "content": "<p>Code formatting - Windows<br>\nI was trying to follow the code [formatting manual](C:\\Builds\\OCPN\\OpenCPN&gt;git init<br>\nReinitialized existing Git repository in C:/Builds/OCPN/OpenCPN/.git/) <br>\nDidn't success. The manual may need some tweaks?<br>\nHere are my attempts:</p>\n<div class=\"codehilite\"><pre><span></span><code>C:\\Builds\\OCPN\\OpenCPN&gt;pip install\nFatal error in launcher: Unable to create process using &#39;&quot;c:\\users\\has-win\\appdata\\local\\programs\\python\\python39\\python.exe&quot;  &quot;C:\\Users\\HAS-WIN\\AppData\\Local\\Programs\\Python\\Python39\\Scripts\\pip.exe&quot; install&#39;: Can&#39;t finde the file.\n</code></pre></div>\n<p><em>After some search:</em></p>\n<div class=\"codehilite\"><pre><span></span><code>C:\\Builds\\OCPN\\OpenCPN&gt;py -m pip install pre-commit\nCollecting pre-commit\n  Downloading pre_commit-3.8.0-py2.py3-none-any.whl.metadata (1.3 kB)\n....\n....\nSuccessfully installed cfgv-3.4.0 distlib-0.3.8 filelock-3.16.1 identify-2.6.1 nodeenv-1.9.1 platformdirs-4.3.6 pre-commit-3.8.0 pyyaml-6.0.2 virtualenv-20.26.6\nC:\\Builds\\OCPN\\OpenCPN&gt;\nC:\\Builds\\OCPN\\OpenCPN&gt;py -m pip --version\npip 24.2 from C:\\Python39\\lib\\site-packages\\pip (python 3.9)\n\nC:\\Builds\\OCPN\\OpenCPN&gt;pre-commit install\n&#39;pre-commit&#39; is not recognized as an internal or external command,\noperable program or batch file.\nC:\\Builds\\OCPN\\OpenCPN&gt;git init\nReinitialized existing Git repository in C:/Builds/OCPN/OpenCPN/.git/\n</code></pre></div>\n<p><em>Added path:</em><br>\nPATH=........;C:\\Python39\\Scripts</p>\n<div class=\"codehilite\"><pre><span></span><code>C:\\Builds\\OCPN\\OpenCPN&gt;pre-commit install\nRunning in migration mode with existing hooks at .git\\hooks\\pre-commit.legacy\nUse -f to use only pre-commit.\npre-commit installed at .git\\hooks\\pre-commit\nC:\\Builds\\OCPN\\OpenCPN&gt;\n</code></pre></div>\n<p>Q1:<br>\nHow do I know the \".pre-commit-config.yaml\" was used?<br>\nQ2:<br>\nNext step to test?</p>",
        "id": 473384744,
        "sender_full_name": "HÃ¥kan Svensson",
        "timestamp": 1727557008
    },
    {
        "content": "<p>Next time you commit something, it will look lik ethis:</p>\n<div class=\"codehilite\"><pre><span></span><code> nohal@Pavels-MacBook-Air î° ~/Source/OpenCPN î° î  master Â± î° git commit -a -m test\nCheck Yaml...........................................(no files to check)Skipped\nFix End of Files.........................................................Passed\nTrim Trailing Whitespace.................................................Passed\nclang-format.............................................................Failed\n- hook id: clang-format\n- files were modified by this hook\n</code></pre></div>",
        "id": 473385126,
        "sender_full_name": "Pavel Kalian",
        "timestamp": 1727557348
    },
    {
        "content": "<p>In this example clang-format fixed the formatting for me, I can review it and if happy commit again, which will pass and finally create the commit:</p>\n<div class=\"codehilite\"><pre><span></span><code> â nohal@Pavels-MacBook-Air î° ~/Source/OpenCPN î° î  master Â± î° git commit -a -m test\nCheck Yaml...........................................(no files to check)Skipped\nFix End of Files.........................................................Passed\nTrim Trailing Whitespace.................................................Passed\nclang-format.............................................................Passed\n[master 7e61b9fcd] test\n 1 file changed, 1 insertion(+), 1 deletion(-)\n</code></pre></div>",
        "id": 473385411,
        "sender_full_name": "Pavel Kalian",
        "timestamp": 1727557566
    },
    {
        "content": "<p>I did a small test:</p>\n<div class=\"codehilite\"><pre><span></span><code>C:\\Builds\\OCPN\\OpenCPN&gt;git commit -a -m &quot;test&quot;\nAn unexpected error has occurred: ExecutableNotFoundError: Executable `/bin/sh` not found\nCheck the log at C:\\Users\\HAS-WIN\\.cache\\pre-commit\\pre-commit.log\n</code></pre></div>\n<p>All for today, late.<br>\nContinuing tomorrow.</p>",
        "id": 473385560,
        "sender_full_name": "HÃ¥kan Svensson",
        "timestamp": 1727557701
    },
    {
        "content": "<p>When I still had to use a Windows machine, I was simply doing all this command line stuff from WSL. Saves all the headache.</p>",
        "id": 473385789,
        "sender_full_name": "Pavel Kalian",
        "timestamp": 1727557930
    },
    {
        "content": "<p>WSL?  Can I use VS2022 there?  :)<br>\nSince the majority of our users use Windows, my goal is to test there.</p>\n<p>The aim was to follow the manual.<br>\nHere's the log. <br>\n<a href=\"/user_uploads/33951/aJwGSMNnsWlw-ZgE3OZ3cZdB/pre-commit.log\">pre-commit.log</a></p>",
        "id": 473387149,
        "sender_full_name": "HÃ¥kan Svensson",
        "timestamp": 1727559211
    },
    {
        "content": "<p>You of course can use VS on the same Windows machine to edit, build and run whatever you need.</p>",
        "id": 473388146,
        "sender_full_name": "Pavel Kalian",
        "timestamp": 1727560209
    },
    {
        "content": "<p>Maybe some progress:<br>\nSearching for \"Windows ExecutableNotFoundError: Executable <code>/bin/sh</code> not found\" gave me the hint to not use pre-commit -legacy (not including #!/usr/bin/env bash)<br>\nThe solution seems to use \"pre-comit install -f\" <br>\nSee the sequence here to what I can see a working clang function?<br>\nIf you agree this looks OK we may update the manual for Windows accordingly?</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"n\">Running</span><span class=\"w\"> </span><span class=\"n\">in</span><span class=\"w\"> </span><span class=\"n\">migration</span><span class=\"w\"> </span><span class=\"n\">mode</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">existing</span><span class=\"w\"> </span><span class=\"n\">hooks</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">git</span><span class=\"err\">\\</span><span class=\"n\">hooks</span><span class=\"err\">\\</span><span class=\"n\">pre</span><span class=\"o\">-</span><span class=\"n\">commit</span><span class=\"p\">.</span><span class=\"n\">legacy</span>\n<span class=\"n\">Use</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">use</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"n\">pre</span><span class=\"o\">-</span><span class=\"n\">commit</span><span class=\"p\">.</span>\n<span class=\"n\">pre</span><span class=\"o\">-</span><span class=\"n\">commit</span><span class=\"w\"> </span><span class=\"n\">installed</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">git</span><span class=\"err\">\\</span><span class=\"n\">hooks</span><span class=\"err\">\\</span><span class=\"n\">pre</span><span class=\"o\">-</span><span class=\"n\">commit</span>\n\n\n<span class=\"nl\">C</span><span class=\"p\">:</span><span class=\"err\">\\</span><span class=\"n\">Builds</span><span class=\"err\">\\</span><span class=\"n\">OCPN</span><span class=\"err\">\\</span><span class=\"n\">OpenCPN</span><span class=\"o\">&gt;</span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">commit</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"s\">\"test\"</span>\n<span class=\"n\">An</span><span class=\"w\"> </span><span class=\"n\">unexpected</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">occurred</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ExecutableNotFoundError</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Executable</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">sh</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">found</span>\n<span class=\"n\">Check</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">log</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">:</span><span class=\"err\">\\</span><span class=\"n\">Users</span><span class=\"err\">\\</span><span class=\"n\">HAS</span><span class=\"o\">-</span><span class=\"n\">WIN</span><span class=\"err\">\\</span><span class=\"p\">.</span><span class=\"n\">cache</span><span class=\"err\">\\</span><span class=\"n\">pre</span><span class=\"o\">-</span><span class=\"n\">commit</span><span class=\"err\">\\</span><span class=\"n\">pre</span><span class=\"o\">-</span><span class=\"n\">commit</span><span class=\"p\">.</span><span class=\"n\">log</span>\n\n<span class=\"nl\">C</span><span class=\"p\">:</span><span class=\"err\">\\</span><span class=\"n\">Builds</span><span class=\"err\">\\</span><span class=\"n\">OCPN</span><span class=\"err\">\\</span><span class=\"n\">OpenCPN</span><span class=\"o\">&gt;</span><span class=\"n\">pre</span><span class=\"o\">-</span><span class=\"n\">commit</span><span class=\"w\"> </span><span class=\"n\">install</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">f</span>\n<span class=\"n\">pre</span><span class=\"o\">-</span><span class=\"n\">commit</span><span class=\"w\"> </span><span class=\"n\">installed</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">git</span><span class=\"err\">\\</span><span class=\"n\">hooks</span><span class=\"err\">\\</span><span class=\"n\">pre</span><span class=\"o\">-</span><span class=\"n\">commit</span>\n\n<span class=\"nl\">C</span><span class=\"p\">:</span><span class=\"err\">\\</span><span class=\"n\">Builds</span><span class=\"err\">\\</span><span class=\"n\">OCPN</span><span class=\"err\">\\</span><span class=\"n\">OpenCPN</span><span class=\"o\">&gt;</span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">commit</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"s\">\"test\"</span>\n<span class=\"p\">[</span><span class=\"n\">INFO</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Initializing</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"c1\">//github.com/pre-commit/pre-commit-hooks.</span>\n<span class=\"p\">[</span><span class=\"n\">INFO</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Initializing</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"c1\">//github.com/pre-commit/mirrors-clang-format.</span>\n<span class=\"p\">[</span><span class=\"n\">INFO</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Installing</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"c1\">//github.com/pre-commit/pre-commit-hooks.</span>\n<span class=\"p\">[</span><span class=\"n\">INFO</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Once</span><span class=\"w\"> </span><span class=\"n\">installed</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">will</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">reused</span><span class=\"p\">.</span>\n<span class=\"p\">[</span><span class=\"n\">INFO</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">This</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">take</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">few</span><span class=\"w\"> </span><span class=\"n\">minutes</span><span class=\"p\">...</span>\n<span class=\"p\">[</span><span class=\"n\">INFO</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Installing</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"c1\">//github.com/pre-commit/mirrors-clang-format.</span>\n<span class=\"p\">[</span><span class=\"n\">INFO</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Once</span><span class=\"w\"> </span><span class=\"n\">installed</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">will</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">reused</span><span class=\"p\">.</span>\n<span class=\"p\">[</span><span class=\"n\">INFO</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">This</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">take</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">few</span><span class=\"w\"> </span><span class=\"n\">minutes</span><span class=\"p\">...</span>\n<span class=\"n\">Check</span><span class=\"w\"> </span><span class=\"n\">Yaml</span><span class=\"p\">...........................................(</span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">files</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">check</span><span class=\"p\">)</span><span class=\"n\">Skipped</span>\n<span class=\"n\">Fix</span><span class=\"w\"> </span><span class=\"n\">End</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Files</span><span class=\"p\">.........................................................</span><span class=\"n\">Passed</span>\n<span class=\"n\">Trim</span><span class=\"w\"> </span><span class=\"n\">Trailing</span><span class=\"w\"> </span><span class=\"n\">Whitespace</span><span class=\"p\">.................................................</span><span class=\"n\">Passed</span>\n<span class=\"n\">clang</span><span class=\"o\">-</span><span class=\"n\">format</span><span class=\"p\">.............................................................</span><span class=\"n\">Failed</span>\n<span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">hook</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">clang</span><span class=\"o\">-</span><span class=\"n\">format</span>\n<span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">files</span><span class=\"w\"> </span><span class=\"n\">were</span><span class=\"w\"> </span><span class=\"n\">modified</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">hook</span>\n\n<span class=\"nl\">C</span><span class=\"p\">:</span><span class=\"err\">\\</span><span class=\"n\">Builds</span><span class=\"err\">\\</span><span class=\"n\">OCPN</span><span class=\"err\">\\</span><span class=\"n\">OpenCPN</span><span class=\"o\">&gt;</span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">status</span>\n<span class=\"n\">On</span><span class=\"w\"> </span><span class=\"n\">branch</span><span class=\"w\"> </span><span class=\"n\">hooktest</span>\n<span class=\"n\">Changes</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">staged</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">commit</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">use</span><span class=\"w\"> </span><span class=\"s\">\"git add &lt;file&gt;...\"</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">update</span><span class=\"w\"> </span><span class=\"n\">what</span><span class=\"w\"> </span><span class=\"n\">will</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">committed</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">use</span><span class=\"w\"> </span><span class=\"s\">\"git restore &lt;file&gt;...\"</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">discard</span><span class=\"w\"> </span><span class=\"n\">changes</span><span class=\"w\"> </span><span class=\"n\">in</span><span class=\"w\"> </span><span class=\"n\">working</span><span class=\"w\"> </span><span class=\"n\">directory</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"nl\">modified</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"n\">gui</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">chcanv</span><span class=\"p\">.</span><span class=\"n\">cpp</span>\n\n<span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">changes</span><span class=\"w\"> </span><span class=\"n\">added</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">commit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">use</span><span class=\"w\"> </span><span class=\"s\">\"git add\"</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"o\">/</span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"s\">\"git commit -a\"</span><span class=\"p\">)</span>\n\n<span class=\"nl\">C</span><span class=\"p\">:</span><span class=\"err\">\\</span><span class=\"n\">Builds</span><span class=\"err\">\\</span><span class=\"n\">OCPN</span><span class=\"err\">\\</span><span class=\"n\">OpenCPN</span><span class=\"o\">&gt;</span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">commit</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"s\">\"test\"</span>\n<span class=\"n\">Check</span><span class=\"w\"> </span><span class=\"n\">Yaml</span><span class=\"p\">...........................................(</span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">files</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">check</span><span class=\"p\">)</span><span class=\"n\">Skipped</span>\n<span class=\"n\">Fix</span><span class=\"w\"> </span><span class=\"n\">End</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Files</span><span class=\"p\">.........................................................</span><span class=\"n\">Passed</span>\n<span class=\"n\">Trim</span><span class=\"w\"> </span><span class=\"n\">Trailing</span><span class=\"w\"> </span><span class=\"n\">Whitespace</span><span class=\"p\">.................................................</span><span class=\"n\">Passed</span>\n<span class=\"n\">clang</span><span class=\"o\">-</span><span class=\"n\">format</span><span class=\"p\">.............................................................</span><span class=\"n\">Passed</span>\n<span class=\"p\">[</span><span class=\"n\">hooktest</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">b7ded5c9</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">test</span>\n<span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">changed</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">insertions</span><span class=\"p\">(</span><span class=\"o\">+</span><span class=\"p\">)</span>\n\n<span class=\"nl\">C</span><span class=\"p\">:</span><span class=\"err\">\\</span><span class=\"n\">Builds</span><span class=\"err\">\\</span><span class=\"n\">OCPN</span><span class=\"err\">\\</span><span class=\"n\">OpenCPN</span><span class=\"o\">&gt;</span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">status</span>\n<span class=\"n\">On</span><span class=\"w\"> </span><span class=\"n\">branch</span><span class=\"w\"> </span><span class=\"n\">hooktest</span>\n\n<span class=\"nl\">C</span><span class=\"p\">:</span><span class=\"err\">\\</span><span class=\"n\">Builds</span><span class=\"err\">\\</span><span class=\"n\">OCPN</span><span class=\"err\">\\</span><span class=\"n\">OpenCPN</span><span class=\"o\">&gt;</span>\n</code></pre></div>",
        "id": 473425777,
        "sender_full_name": "HÃ¥kan Svensson",
        "timestamp": 1727597633
    },
    {
        "content": "<p>Conclusions:<br>\nTo install pre-commit on Windows:<br>\nC:\\Builds\\OCPN\\OpenCPN&gt;py -m pip install pre-commit<br>\nAdded path:<br>\nPATH=........;C:\\Python39\\Scripts<br>\nC:\\Builds\\OCPN\\OpenCPN&gt;pre-comit install -f<br>\n<strong>But</strong>...<br>\nHaving necessary scripts on that path seems kind of spectacular? What if Python is updated from v 3.9?<br>\nCan we use another method than: \"py -m pip install pre-commit\"?<br>\n<span class=\"user-mention\" data-user-id=\"522729\">@Dan Dickey</span>  You're the Win expert...</p>",
        "id": 473428410,
        "sender_full_name": "HÃ¥kan Svensson",
        "timestamp": 1727600085
    },
    {
        "content": "<p>It would seem that <code>py -m pip install pre-commit</code> works.  But I am not sure what to do after that.</p>",
        "id": 473429225,
        "sender_full_name": "Dan Dickey",
        "timestamp": 1727600299
    },
    {
        "content": "<p>Two steps:<br>\nAdd the path where the \"pip.exe\" is saved.<br>\nthen: \"pre-comit install -f\" and everything works on next commit.</p>",
        "id": 473429769,
        "sender_full_name": "HÃ¥kan Svensson",
        "timestamp": 1727600544
    },
    {
        "content": "<p>I wonder why have to add pip.exe to path.  On my system <code>py</code> and <code>python</code> are both recognized at the command line.</p>",
        "id": 473430076,
        "sender_full_name": "Dan Dickey",
        "timestamp": 1727600631
    },
    {
        "content": "<p>Yes py was recognized also here but Git didn't found pip.exe on \"pre-commit install -f\" until I included a environment path to the scripts.</p>",
        "id": 473430686,
        "sender_full_name": "HÃ¥kan Svensson",
        "timestamp": 1727600798
    },
    {
        "content": "<p>Sorry my bad.<br>\nThe requested path is this:<br>\nC:\\Users\\HAS-WIN\\AppData\\Local\\Programs\\Python\\Python39\\Scripts\\<br>\nSo not the same as to the python program</p>",
        "id": 473431074,
        "sender_full_name": "HÃ¥kan Svensson",
        "timestamp": 1727601211
    },
    {
        "content": "<p>So my conclusions to add pre-commit to windows would be:<br>\npy -m pip install pre-commit<br>\nAdd path to \"pip.xe\": <br>\n%LOCALAPPDATA%\\Programs\\Python\\Python39\\Scripts<br>\npre-comit install -f</p>",
        "id": 473432072,
        "sender_full_name": "HÃ¥kan Svensson",
        "timestamp": 1727602130
    },
    {
        "content": "<p>Or you can use fully qualified path to the script: <code>c:\\Users\\dldic\\AppData\\Local\\Programs\\Python\\Python39\\Scripts\\pre-commit.exe install -f</code><br>\nThis should be ok since this is a one-time event for each repository.</p>",
        "id": 473432616,
        "sender_full_name": "Dan Dickey",
        "timestamp": 1727602614
    },
    {
        "content": "<p>Thus no need to add to PATH environment.</p>",
        "id": 473432643,
        "sender_full_name": "Dan Dickey",
        "timestamp": 1727602658
    },
    {
        "content": "<p>Good! It's of course a one-time event to make pre-commit install. Didn't think of that.</p>",
        "id": 473432937,
        "sender_full_name": "HÃ¥kan Svensson",
        "timestamp": 1727602916
    },
    {
        "content": "<p>One thing I noticed is that if the pre-commit hook fails for whatever reason it seems to really confuse VS2022.</p>",
        "id": 473433002,
        "sender_full_name": "Dan Dickey",
        "timestamp": 1727602938
    },
    {
        "content": "<p>Maybe. I didn't touched VS2022 until I found the -f method (pre-comit install -f) and after that VS was working as usual.</p>",
        "id": 473433127,
        "sender_full_name": "HÃ¥kan Svensson",
        "timestamp": 1727603047
    },
    {
        "content": "<p>It would be great if someone made a  PR updating the manual with these conclusions.  \"Edit  this Page\" should do the trick</p>",
        "id": 473434893,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1727604503
    },
    {
        "content": "<p>I am unsure how to edit manual pages but this worked for me in a somewhat \"generic\" way:</p>\n<div class=\"codehilite\"><pre><span></span><code>py -3 -m pip install pre-commit\nfor /f &quot;delims=&quot; %G in (&#39;where /R &quot;%HOMEPATH%\\AppData\\Local\\Programs\\Python&quot; /F pre-commit.exe&#39;) do (%G install -f)\n</code></pre></div>\n<p>The \"trick\" is to look down the Python installation path to see where pip install put the pre-commit executable.</p>",
        "id": 473455467,
        "sender_full_name": "Dan Dickey",
        "timestamp": 1727621156
    },
    {
        "content": "<p>&gt; </p>\n<p><span class=\"user-mention silent\" data-user-id=\"522729\">Dan Dickey</span> <a href=\"#narrow/stream/332172-manuals/topic/ocpn-manuals/near/473455467\">said</a>:</p>\n<blockquote>\n<p>I am unsure how to edit manual pages</p>\n</blockquote>\n<p>It's actually simple. Go to <a href=\"https://opencpn-manuals.github.io/main/opencpn-dev/code-formatting.html\">https://opencpn-manuals.github.io/main/opencpn-dev/code-formatting.html</a>. In  the top-right corner there is a \"Edit this page\" link.  Following it throws you in  editor. Edit the page so it looks OK, there is a preview available. When done, press the green button top right (i don't know the exact label, it looks different to me). Anyway, pressing that button creates the PR</p>",
        "id": 473476343,
        "sender_full_name": "Alec Leamas",
        "timestamp": 1727633881
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"522729\">@Dan Dickey</span> <br>\nI'm out with the boat so no quick response for the moment.<br>\nI tried you \"for /f....\" without success?<br>\nWhen \"C:\\Python39\\Scripts\" is added to env Path it does though works.</p>\n<div class=\"codehilite\"><pre><span></span><code>C:\\Builds\\OCPN\\OpenCPN&gt;pre-commit install -f\npre-commit installed at .git\\hooks\\pre-commit\n</code></pre></div>",
        "id": 473825672,
        "sender_full_name": "HÃ¥kan Svensson",
        "timestamp": 1727722325
    },
    {
        "content": "<p>Ok, I try to improve the command a bit to make it more robust.</p>",
        "id": 473867266,
        "sender_full_name": "Dan Dickey",
        "timestamp": 1727733279
    }
]